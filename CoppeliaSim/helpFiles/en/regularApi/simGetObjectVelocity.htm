<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simGetObjectVelocity</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1>Regular API function</h1>
<p class=subsectionBar><a name="simGetObjectVelocity" id="simGetObjectVelocity"></a>simGetObjectVelocity / sim.getObjectVelocity</p>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the linear and/or angular velocity of an object, in absolute coordinates. The velocity is a measured velocity (i.e. from one simulation step to the next), and is available for all objects in the scene. See also <a href="simGetVelocity.htm">sim.getVelocity</a>.<br></td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C/C++<br>synopsis
</td> 
<td class=apiTableRightCSyn>simInt simGetObjectVelocity(simInt objectHandle,simFloat* linearVelocity,simFloat* angularVelocity)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C/C++<br>parameters</td> 
<td class=apiTableRightCParam>
<div><strong>objectHandle</strong>: handle of a <a href="../objects.htm">scene object</a>. It is highly recommended to add <em><a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_axis</a></em> to the object handle, in order to obtain the <em>regular</em> angular velocity for the object, i.e. the rotation axis and the rotation velocity that is represented by the axis' length. If <em>sim.handleflag_axis</em> is omitted, then a derivative of Euler angles expressed relative to previous' simulation frame will be returned for the angular velocity.</div>
<div><strong>linearVelocity</strong>: pointer to 3 values that will receive the linear velocity. Can be nullptr</div>
<div><strong>angularVelocity</strong>: pointer to 3 values that will receive the angular velocity. Can be nullptr</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C/C++<br>return value
</td> 
<td class=apiTableRightCRet>
<div>-1 if operation was not successful</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn>float[3] linearVelocity,float[3] angularVelocity=sim.getObjectVelocity(int objectHandle)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
<div><strong>objectHandle</strong>: Similar to the C-function counterpart</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>
<div><strong>linearVelocity</strong>: table containing 3 values that represent the linear velocity</div>
<div><strong>angularVelocity</strong>: table containing 3 values that represent the angular velocity</div>
</td> 
</tr> 

 



<tr class=apiTableTr>
<td class=apiTableLeftPSyn>Python<br>synopsis</td>
<td class=apiTableRightPSyn>list linearVelocity,list angularVelocity=sim.getObjectVelocity(int objectHandle)</td>
</tr>

</table> 

<br>
</td>

</table>
</div>
</body>
</html>
