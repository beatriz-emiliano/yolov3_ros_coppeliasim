<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simPackTable</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1>Regular API function</h1>
<p class=subsectionBar><a name="simPackTable" id="simPackTable"></a>simPackTable / sim.packTable </p>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Packs a table into a buffer. The table may contain other nested tables, nil, bool, number or string values. All other types (e.g. functions) will be considered as string or nil values. You can also use sim.packTable to quickly compare two tables or to perform a deep copy of a table. See also <a href="simUnpackTable.htm">sim.unpackTable</a>, the <a href="../apiFunctions.htm#stacks">other stack functions</a>  and the <a href="../apiFunctions.htm#packing">other packing/unpacking functions</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C/C++<br>synopsis
</td> 
<td class=apiTableRightCSyn>simChar* simPackTable(simInt stackHandle,simInt* bufferSize)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C/C++<br>parameters</td> 
<td class=apiTableRightCParam>
<div><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack.htm">simCreateStack</a>. There must be a table located at the top of the stack.</div>
<div><strong>bufferSize</strong>: the size of the returned buffer.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C/C++<br>return value
</td> 
<td class=apiTableRightCRet>
<div>nullptr in case of an error, otherwise a data buffer. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer.htm">simReleaseBuffer</a>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn>buffer buffer=sim.packTable(any[]/map aTable,int packingScheme=0)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
<div><strong>aTable</strong>: a script table.</div>
<div><strong>packingScheme</strong>: 0 for CoppeliaSim format, 1 for CBOR format, 2 for CBOR format where doubles are packed as floats.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>
<div><strong>buffer</strong>: a string buffer.</div></td> 
</tr> 


<tr class=apiTableTr>
<td class=apiTableLeftPSyn>Python<br>synopsis</td>
<td class=apiTableRightPSyn>bytes buffer=sim.packTable(list aTable,int packingScheme=0)</td>
</tr>

</table> 

<br>
</td>
</tr>
</table>
</div>
</body>
</html>
