<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simCallScriptFunctionEx</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1>Regular API function</h1>
<p class=subsectionBar><a name="simCallScriptFunctionEx" id="simCallScriptFunctionEx"></a>simCallScriptFunctionEx</p>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Calls a script function (from a <a href="../plugins.htm">plugin</a>, <a href="../mainClientApplication.htm">the main client application</a>, or from another script). This represents a <a href="../callbackFunctions.htm">user callback</a> inside of a script. The target script must be initialized for this call to succeed, e.g. when calling <a href="../simulationScripts.htm">simulation scripts</a>, then simulation must be running. See also <a href="simExecuteScriptString.htm">sim.executeScriptString</a>.
<br><br>
<div>Data exchange between a plugin and a script happens via a <a href="../apiFunctions.htm#stacks">stack</a>. Reading and writing arguments from/to the stack gives you a maximum of flexibility, and you wil be able to exchange also complex data structures. But it can also be tedious and error prone. Use instead the helper classes located in <em>programming/common/stack</em> and <em>programming/include/stack</em>: they will greatly simplify the task. Have a look at the example plugins <a href="https://github.com/CoppeliaRobotics/simExtSkeletonPlugin" target="_blank">simExtSkeletonPlugin</a> and <a href="https://github.com/CoppeliaRobotics/simExtSkeletonPluginNG" target="_blank">simExtSkeletonPluginNG</a>.</div>


</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C/C++<br>synopsis
</td> 
<td class=apiTableRightCSyn>simInt simCallScriptFunctionEx(simInt scriptHandleOrType,const simChar* functionNameAtScriptName,simInt stackId)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C/C++<br>parameters</td> 
<td class=apiTableRightCParam>
<div><strong>scriptHandle</strong>: the handle of the script. See <a href="simGetScriptHandleEx.htm">simGetScriptHandleEx</a></div>
<div><strong>functionName</strong>: the function to call.</div>
<div><strong>stackId</strong>: a <a href="simCreateStack.htm">stack handle</a>. The stack represents the function's in/out values. See also the <a href="../apiFunctions.htm#stacks">available stack functions</a>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C/C++<br>return value
</td> 
<td class=apiTableRightCRet>
<div>-1 in case of an error</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn>From Lua, call <a href="simCallScriptFunction.htm">sim.callScriptFunction</a> instead.</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
<div></div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>
<div></div>
</td> 
</tr> 

<tr class=apiTableTr> 
<td class=apiTableLeftPSyn>
Python<br>synopsis
</td> 
<td class=apiTableRightPSyn>From Python, call <a href="simCallScriptFunction.htm">sim.callScriptFunction</a> instead.</td> 
</tr> 

</table> 


<br>
</td>

</table>
</div>
</body>
</html>
