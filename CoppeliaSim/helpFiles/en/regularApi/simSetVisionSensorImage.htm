<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simSetVisionSensorImage</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1>Regular API function</h1>
<p class=subsectionBar><a name="simSetVisionSensorImage" id="simSetVisionSensorImage"></a>simSetVisionSensorImage / sim.setVisionSensorImage</p>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Deprecated. Use <a href="simSetVisionSensorImg.htm">sim.setVisionSensorImg</a> instead</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C/C++<br>synopsis
</td> 
<td class=apiTableRightCSyn>simInt simSetVisionSensorImage(simInt sensorHandle,const simFloat* image)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C/C++<br>parameters</td> 
<td class=apiTableRightCParam>
<div><strong>sensorHandle</strong>: handle of the vision sensor object. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_greyscale</a> (simply add sim.handleflag_greyscale to sensorHandle if you provide grey scale values instead of rgb value) or/and <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_rawvalue</a> (simply add sim.handleflag_rawvalue to sensorHandle if you do not wish to trigger image processing). If you instead want to set the vision sensor depth buffer, you can combine the handle of the vision sensor object with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_depthbuffer</a>.</div>
<div><strong>image</strong>: rgb buffer containing the image (buffer size must be resolutionX*resolutionY*3). Values in the buffer should vary between 0 and 1. In case a grey scale image is provided, the buffer size must be resolutionX*resolutionY. In case sim.handleflag_depthbuffer is specified, then the buffer size must be resolutionX*resolutionY.</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C/C++<br>return value
</td> 
<td class=apiTableRightCRet>
<div>-1 if operation was not successful. 0 if the image processing didn't trigger anything, 1 if the image processing triggered a detection<br>
</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn> <div> (1) int result=sim.setVisionSensorImage(int sensorHandle,float[] image) </div>
<div> (2) int result=sim.setVisionSensorImage(int sensorHandle,buffer image)</div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
<div><strong>sensorHandle</strong>: handle of the vision sensor object. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_greyscale</a> (simply add sim.handleflag_greyscale to sensorHandle if you provide grey scale values instead of rgb value) or/and <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_rawvalue</a> (simply add sim.handleflag_rawvalue to sensorHandle if you do not wish to trigger image processing). If you instead want to set the vision sensor depth buffer, you can combine the handle of the vision sensor object with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_depthbuffer</a>.</div>
<div>(1) a table containing individual values [0-1] for the red, green and blue components, or for the grey component. In case sim.handleflag_depthbuffer is specified, the table contains depth values.</div>
<div>(2) a string containing individual chars [0-255] for the red, green and blue components, or for the grey component. In case sim.handleflag_depthbuffer is specified, the string is a coded string (i.e. a packed depth value table).</div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>
<div>Similar to the C-function counterpart</div>
<div></div></td> 

<tr class=apiTableTr> 
<td class=apiTableLeftPSyn>
Python<br>synopsis
</td> 
<td class=apiTableRightPSyn>
<div> (1) int result=sim.setVisionSensorImage(int sensorHandle,list image) </div>
<div> (2) int result=sim.setVisionSensorImage(int sensorHandle,bytes image)</div>
</td> 
</tr> 
 

</table> 


<br>
</td>

</table>
</div>
</body>
</html>
