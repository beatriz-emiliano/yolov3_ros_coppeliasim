<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Accessing objects programmatically</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Accessing scene objects programmatically</h1>

<p>When programming in and around CoppeliaSim, you will always need to reference <a href="objects.htm">scene objects</a>. You do this with handles, that you obtain via <a href="regularApi/simGetObject.htm">sim.getObject</a>, which expects an object path as input argument. The object path can be expressed in an absolute manner, but also in a relative manner in case of <a href="#fromAssociatedCode">associated code</a>.</p>
<p>In both cases, the path to the object can often be simplified. You may also use wildcards, and optionally specify the object sequence or order in a given scene hierarchy. Or simply fetch the n-th object that matches a specific path/alias.</p>
<div class="warningBox">
<p><strong>Note</strong>: until CoppeliaSim V4.2.0, object access was based on <em>object names </em>(with <em>sim.getObjectHandle</em>), which are now deprecated (but still functional for backward compatibility). We however highly recommend to use object paths as described below, to retrieve object handles. Object paths can easily be identified since they start with one of following characters: <strong>/</strong>, <strong>.</strong> or <strong>:</strong></p>
<p>Deprecated object names are not displayed anymore in the scene hierarchy (where object aliases are displayed instead). You can however still see the deprecated name of an object by selecting it: it will be displayed at the top of the rendering page.</p>
</div>


<br>
<br>


<h2><a name="fromUnassociatedCode"></a>Access from <em>unassociated</em> code</h2>

<p><em>Unassociated</em> code is code that is not attached to any scene object. This includes all the code written for <a href="plugins.htm">plugins</a>, <a href="addOns.htm">add-ons</a>, <a href="remoteApiOverview.htm">remote API</a> clients, external <a href="rosInterfaces.htm">ROS</a> nodes, and <a href="mainScript.htm">the main script</a>.</p>

<p>In that case, you simply specify the object's absolute path, in order to retrieve its handle. If the object alias is unique, the path to the object can be simplified. You may also use wildcards, and optionally specify the object sequence in a given scene hierarchy. Or simply fetch the n-th object that matches a specific path:</p>

<code class="hljs language-c++ coppelia-coppeliasim-plugin">
// e.g. inside of a c/c++ plugin:

// using the full <em>Object</em> path:
int objectHandle=simGetObject(&quot;/Path/to/Object&quot;,-1,-1,0);

// if object with alias <em>Object</em> is unique:
int objectHandle=simGetObject(&quot;/Object&quot;,-1,-1,0); 

// handle of the first <em>Robot</em>, in a given tree:
int robotHandle=simGetObject(&quot;/Robot[0]&quot;,-1,-1,0);
 
// handle of the second <em>Robot</em>, in a given tree:
int robotHandle=simGetObject(&quot;/Robot[1]&quot;,-1,-1,0);

// find all objects starting with prefix <em>Mobile</em>:
int i=0
while (true)
{
    int objectHandle=simGetObject(&quot;/Mobile*&quot;,i++,-1,1);
    if (objectHandle&lt;0)
        break;
} </code>

<code class="hljs language-python coppelia-zmq-remote-api-client">
# e.g. inside of a Python ZeroMQ remote API client:

# using the full <em>Object</em> path:
objectHandle=sim.getObject(&quot;/Path/to/Object&quot;)

# if object with alias <em>Object</em> is unique:
objectHandle=sim.getObject(&quot;/Object&quot;)

# handle of the first <em>Robot</em>, in a given tree:
robotHandle=sim.getObject(&quot;/Robot[0]&quot;) 

# handle of the second <em>Robot</em>, in a given tree:
robotHandle=sim.getObject(&quot;/Robot[1]&quot;) 
</code>

<br>
<br>

<h2>
<a name="fromAssociatedCode"></a>Access from <em>associated</em> code
</h2>

<p><em>Associated</em> code is code that is associated with a scene object (i.e. <em>attached</em> to a scene object). This includes all the code written for <a href="childScripts.htm">child scripts</a> or <a href="customizationScripts.htm">customization scripts</a>.</p>

<p>In that case, objects can also be accessed in an absolute manner, but additionally, object access can also operate in a relative manner (relative to the current script/object (<em> ./ </em>), or relative to the model containing current script ( <em>:/</em> ) ):</p>



<code class="hljs language-lua coppelia-coppeliasim-script">
// e.g. inside of child or customization script:

-- returns the object this script is attached to:
local objectHandle=sim.getObject(&quot;.&quot;) 

-- returns the parent object this script is attached to:
local parentHandle=sim.getObject(&quot;..&quot;) 

-- returns the model this script is contained in:
local modelHandle=sim.getObject(&quot;:&quot;) 

-- returns the parent model this script is contained in:
local parentModelHandle=sim.getObject(&quot;::&quot;) 

-- returns the first object in the current tree, that starts with <em>Object</em>:
local objectHandle=sim.getObject(&quot;./Object*&quot;) 

-- returns the first <em>Object</em> in the current model tree:
local objectHandle=sim.getObject(&quot;:/Object&quot;) 

-- returns the 4th <em>Leg</em> in the current model tree:
legHandle=sim.getObject(&quot;:/Leg[3]&quot;) 

-- parse through all <em>Leg</em> objects the current model tree:
local i=0
while true do
    local legHandle=sim.getObject(&quot;:/Leg&quot;,{index=i,noError=true})
    if legHandle&lt;0 then
        break
    end
    i=i+1
end

-- returns the first <em>Object</em> in the tree of <em>AnotherObject</em>:
local objectHandle=sim.getObject(&quot;./Object&quot;,{proxy=AnotherObject}) </code>



<br>
<br>
 </tr>
 <tr>
   <td > 
 </tr>
</table> 
</div>  
  
  
</body>

</html>
