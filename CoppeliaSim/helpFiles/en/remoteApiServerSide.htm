<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Enabling the remote API - server side</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>Enabling the legacy remote API - server side</h1>

<p>
The legacy remote API server side is implemented via a <a href="plugins.htm">CoppeliaSim plugin</a> that is based on the <a href="apiFunctions.htm">regular API</a>. The legacy remote API plugin project is located <a href="https://github.com/CoppeliaRobotics/simExtRemoteApi" target="_blank">here</a>. Should you miss one specific function, then you can  implement it yourself into the legacy remote API framework (see also the section on <a href="remoteApiExtension.htm">extending the legacy remote API</a>). </p>
<p>To enable the legacy remote API on the server side (i.e. on CoppeliaSim's side), make sure the legacy remote API plugin was successfully loaded at CoppeliaSim start-up (simExtRemoteApi.dll, libsimExtRemoteApi.dylib or libsimExtRemoteApi.so) (you can inspect the console window for information related to plugin loading). The legacy remote API plugin can start as many server services as needed (each service will be listening/communicating on a different port). A server service can be started in two different ways:</p>

<li><a name="continuousRemoteApiService" id="continuousRemoteApiService"></a>At CoppeliaSim start-up (<strong>continuous legacy remote API server service</strong>). The legacy remote API plugin will try reading a configuration file named <em>remoteApiConnections.txt</em> and according to its content, start appropriate server services. Have a look at the  configuration file for details. Use this method for remote control of the simulator itself. With this method legacy remote API functions will always be executed on the server side, even if simulation is not running (which is not always the case with next method here below). There is another method to start a continuous legacy remote API server service, via the <a href="commandLine.htm">command line</a>.</li>
<li><a name="temporaryRemoteApiService" id="temporaryRemoteApiService"></a>From within a <a href="scripts.htm">script</a> (<strong>temporary legacy remote API server service</strong>). This is most of the time the preferred method of starting a legacy remote API server service. The user is in control when the service is started or stopped. When a temporary legacy remote API server service is started from a <a href="simulationScripts.htm">simulation script</a> however, the service will automatically be stopped at simulation end. A temporary legacy remote API server service can be started or stopped with following 2 custom script functions (the 2 functions are exported by the plugin): </li>


<p class=subsectionBarTab><a name="simExtRemoteApiStart" id="simExtRemoteApiStart"></a><a name="simRemoteApi.start" id="simRemoteApi.start"></a>simRemoteApi.start</p>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Starts a temporary legacy remote API server service on the specified port. When started from a <a href="simulationScripts.htm">simulation script</a>, the service will automatically end when the simulation finishes</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn>int result=simRemoteApi.start(int portNumber,int maxPacketSize=1300,bool debug=false,bool preEnableTrigger=false)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
<div><strong>portNumber</strong>: port where to install the server service. Ports above 20000 are preferred. Negative port numbers can be specified in order to use shared memory, instead of socket communication.</div>
<div><strong>maxPacketSize</strong>: the maximum size of a socket send-packet. Make sure to keep the value at 1300, unless the client side has a different setting.</div>
<div><strong>debug</strong>: if true, a window will display the data traffic on that port.</div>
<div><strong>preEnableTrigger</strong>: if true, the server service will be pre-enabled for a stepped mode.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>
<div>-1 if operation was not successful</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftPSyn>
Python<br>synopsis
</td> 
<td class=apiTableRightPSyn>int result=simRemoteApi.start(int portNumber,int maxPacketSize=1300,bool debug=false,bool preEnableTrigger=false)<br></td> 
</tr> 
</table> 
<br>











<p class=subsectionBarTab><a name="simExtRemoteApiStop" id="simExtRemoteApiStop"></a><a name="simRemoteApi.stop" id="simRemoteApi.stop"></a>simRemoteApi.stop</p>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Stops a temporary legacy remote API server service on the specified port</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn>int result=simRemoteApi.stop(int portNumber)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
<div><strong>portNumber</strong>: port where the server service is running</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>
<div>-1 if operation was not successful</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftPSyn>
Python<br>synopsis
</td> 
<td class=apiTableRightPSyn>int result=simRemoteApi.stop(int portNumber)</td> 
</tr> 
</table> 
<br>


<br>
<p>
You can gather information about any legacy remote API server service with following custom script function (the function is exported by the plugin):
</p>






<p class=subsectionBar><a name="simExtRemoteApiStatus" id="simExtRemoteApiStatus"></a><a name="simRemoteApi.status" id="simRemoteApi.status"></a>simRemoteApi.status</p>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Fetches information about a server service. Use this function to enumerate all server services running.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn>int status, table[5] info, int serverVersion, int clientVersion, string clientIp=simRemoteApi.status(int portNumber)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
<div><strong>portNumber</strong>: port where the server service is running.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>
<div><strong>status</strong>: -1 if no service is running on the given port. Otherwise a bit-coded value:</div>
<div class=tab>bit 0: communication thread is running</div>
<div class=tab>bit 1: client is connected</div>
<div><strong>info</strong>: nil if no service is running at the given index. Otherwise following values:</div>
<div class=tab>info[1]: time when last client request was received</div>
<div class=tab>info[2]: time when last client request was replied</div>
<div class=tab>info[3]: time that passed between 2 successive requests from the client side</div>
<div class=tab>info[4]: number of commands received during last client request</div>
<div class=tab>info[5]: number of commands sent during last reply to client</div>
<div><strong>serverVersion</strong>: the version of the remote API server plugin</div>
<div><strong>clientVersion</strong>: the version of the remote API client, or -1 if that information is not (yet) available</div>
<div><strong>clientIp</strong>: the IP address of the connected client</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftPSyn>
Python<br>synopsis
</td> 
<td class=apiTableRightPSyn>int status, list info, int serverVersion, int clientVersion, string clientIp=simRemoteApi.status(int portNumber)</td> 
</tr> 
</table> 
<br>


<br>



<p>
You can reset (i.e. destroy and recreate) any legacy remote API server service with following custom script function (the function is exported by the plugin):
</p>






<p class=subsectionBar><a name="simExtRemoteApiReset" id="simExtRemoteApiReset"></a><a name="simRemoteApi.reset" id="simRemoteApi.reset"></a>simRemoteApi.reset</p>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Resets a legacy remote API server service on the specified port. This is equivalent to call <a href="#simRemoteApi.stop">simRemoteApi.stop</a> followed by <a href="#simRemoteApi.start">simRemoteApi.start</a>, but also works for <a href="#continuousRemoteApiService">continuous remote API server services</a>. This can be useful to force disconnection from a client.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn>int result=simRemoteApi.reset(int portNumber)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
<div><strong>portNumber</strong>: port where the server service is running.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>
<div>-1 if operation was not successful</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftPSyn>
Python<br>synopsis
</td> 
<td class=apiTableRightPSyn>int result=simRemoteApi.reset(int portNumber)</td> 
</tr> 
</table> 
<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>