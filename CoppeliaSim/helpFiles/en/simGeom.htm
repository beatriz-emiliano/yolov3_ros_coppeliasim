<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN"><html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-us">
<title>simGeom API</title>
<link rel="stylesheet" type="text/css" href="../../helpFiles/style.css">
<script type="text/javascript">
//
function getParameterByName(name, url = window.location.href)
{
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if(!results) return null;
    if(!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
//
                </script><style type="text/css">
td.section { margin: 0; padding: 0; }
                </style></head>
<body>
<div align="center"><table class="allEncompassingTable">

<tr><td id="title" class="section"><h1>Geom plugin API reference</h1></td></tr>
<tr><td id="info" class="section"><p class="warningBox">All units, unless otherwise indicated, are specified in meters and radians. Note that mesh-, point cloud- and OC tree-handles mentioned in this reference have no direct relation with CoppeliaSim shape-, point cloud- and OC tree-handles: meshes, point cloud and octrees mentioned in this API reference are internal representations that are exclusively created, manipulated and destroyed with below API functions.<br>
Below API functions are a sub-set of their <a href="coppeliaGeometricRoutinesApi-alphabetic.htm">C++ API counterpart</a>.</p></td></tr>

<tr><td id="alphabetical" class="section"><pre class="apiList">
<a href="?#simGeom.copyMesh">simGeom.copyMesh</a>
<a href="?#simGeom.copyOctree">simGeom.copyOctree</a>
<a href="?#simGeom.copyPtcloud">simGeom.copyPtcloud</a>
<a href="?#simGeom.createMesh">simGeom.createMesh</a>
<a href="?#simGeom.createMeshFromSerializationData">simGeom.createMeshFromSerializationData</a>
<a href="?#simGeom.createOctreeFromColorPoints">simGeom.createOctreeFromColorPoints</a>
<a href="?#simGeom.createOctreeFromMesh">simGeom.createOctreeFromMesh</a>
<a href="?#simGeom.createOctreeFromOctree">simGeom.createOctreeFromOctree</a>
<a href="?#simGeom.createOctreeFromPoints">simGeom.createOctreeFromPoints</a>
<a href="?#simGeom.createOctreeFromSerializationData">simGeom.createOctreeFromSerializationData</a>
<a href="?#simGeom.createPtcloudFromColorPoints">simGeom.createPtcloudFromColorPoints</a>
<a href="?#simGeom.createPtcloudFromPoints">simGeom.createPtcloudFromPoints</a>
<a href="?#simGeom.createPtcloudFromSerializationData">simGeom.createPtcloudFromSerializationData</a>
<a href="?#simGeom.destroyMesh">simGeom.destroyMesh</a>
<a href="?#simGeom.destroyOctree">simGeom.destroyOctree</a>
<a href="?#simGeom.destroyPtcloud">simGeom.destroyPtcloud</a>
<a href="?#simGeom.getBoxBoxDistance">simGeom.getBoxBoxDistance</a>
<a href="?#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>
<a href="?#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>
<a href="?#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>
<a href="?#simGeom.getMeshMeshCollision">simGeom.getMeshMeshCollision</a>
<a href="?#simGeom.getMeshMeshDistance">simGeom.getMeshMeshDistance</a>
<a href="?#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>
<a href="?#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>
<a href="?#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>
<a href="?#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>
<a href="?#simGeom.getMeshSegmentCollision">simGeom.getMeshSegmentCollision</a>
<a href="?#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>
<a href="?#simGeom.getMeshSerializationData">simGeom.getMeshSerializationData</a>
<a href="?#simGeom.getMeshTriangleCollision">simGeom.getMeshTriangleCollision</a>
<a href="?#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>
<a href="?#simGeom.getOctreeOctreeCollision">simGeom.getOctreeOctreeCollision</a>
<a href="?#simGeom.getOctreeOctreeDistance">simGeom.getOctreeOctreeDistance</a>
<a href="?#simGeom.getOctreePointCollision">simGeom.getOctreePointCollision</a>
<a href="?#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>
<a href="?#simGeom.getOctreePtcloudCollision">simGeom.getOctreePtcloudCollision</a>
<a href="?#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>
<a href="?#simGeom.getOctreeSegmentCollision">simGeom.getOctreeSegmentCollision</a>
<a href="?#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>
<a href="?#simGeom.getOctreeSerializationData">simGeom.getOctreeSerializationData</a>
<a href="?#simGeom.getOctreeTriangleCollision">simGeom.getOctreeTriangleCollision</a>
<a href="?#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>
<a href="?#simGeom.getOctreeVoxels">simGeom.getOctreeVoxels</a>
<a href="?#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>
<a href="?#simGeom.getPtcloudPoints">simGeom.getPtcloudPoints</a>
<a href="?#simGeom.getPtcloudPtcloudDistance">simGeom.getPtcloudPtcloudDistance</a>
<a href="?#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>
<a href="?#simGeom.getPtcloudSerializationData">simGeom.getPtcloudSerializationData</a>
<a href="?#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>
<a href="?#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a>
<a href="?#simGeom.getSegmentSegmentDistance">simGeom.getSegmentSegmentDistance</a>
<a href="?#simGeom.getTransformedPoints">simGeom.getTransformedPoints</a>
<a href="?#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a>
<a href="?#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>
<a href="?#simGeom.getTriangleTriangleDistance">simGeom.getTriangleTriangleDistance</a>
<a href="?#simGeom.scaleMesh">simGeom.scaleMesh</a>
<a href="?#simGeom.scaleOctree">simGeom.scaleOctree</a>
<a href="?#simGeom.scalePtcloud">simGeom.scalePtcloud</a></pre></td></tr>

<tr><td id="category" class="section">

<h2><a name="meshCreation"></a>Mesh creation/destruction/manipulation/info</h2>
<pre class="apiList">
<a href="?#simGeom.createMesh">simGeom.createMesh</a>
<a href="?#simGeom.destroyMesh">simGeom.destroyMesh</a>
<a href="?#simGeom.copyMesh">simGeom.copyMesh</a>
<a href="?#simGeom.scaleMesh">simGeom.scaleMesh</a>
<a href="?#simGeom.getMeshSerializationData">simGeom.getMeshSerializationData</a>
<a href="?#simGeom.createMeshFromSerializationData">simGeom.createMeshFromSerializationData</a>
</pre>

<h2><a name="octreeCreation"></a>OC-tree creation/destruction/manipulation/info</h2>
<pre class="apiList">
<a href="?#simGeom.createOctreeFromColorPoints">simGeom.createOctreeFromColorPoints</a>
<a href="?#simGeom.createOctreeFromMesh">simGeom.createOctreeFromMesh</a>
<a href="?#simGeom.createOctreeFromOctree">simGeom.createOctreeFromOctree</a>
<a href="?#simGeom.createOctreeFromPoints">simGeom.createOctreeFromPoints</a>
<a href="?#simGeom.destroyOctree">simGeom.destroyOctree</a>
<a href="?#simGeom.copyOctree">simGeom.copyOctree</a>
<a href="?#simGeom.scaleOctree">simGeom.scaleOctree</a>
<a href="?#simGeom.getOctreeSerializationData">simGeom.getOctreeSerializationData</a>
<a href="?#simGeom.createOctreeFromSerializationData">simGeom.createOctreeFromSerializationData</a>
<a href="?#simGeom.getOctreeVoxels">simGeom.getOctreeVoxels</a>
</pre>

<h2><a name="ptcloudCreation"></a>Point-cloud creation/destruction/manipulation/info</h2>
<pre class="apiList">
<a href="?#simGeom.createPtcloudFromColorPoints">simGeom.createPtcloudFromColorPoints</a>
<a href="?#simGeom.createPtcloudFromPoints">simGeom.createPtcloudFromPoints</a>
<a href="?#simGeom.destroyPtcloud">simGeom.destroyPtcloud</a>
<a href="?#simGeom.copyPtcloud">simGeom.copyPtcloud</a>
<a href="?#simGeom.scalePtcloud">simGeom.scalePtcloud</a>
<a href="?#simGeom.getPtcloudSerializationData">simGeom.getPtcloudSerializationData</a>
<a href="?#simGeom.createPtcloudFromSerializationData">simGeom.createPtcloudFromSerializationData</a>
<a href="?#simGeom.getPtcloudPoints">simGeom.getPtcloudPoints</a>
</pre>

<h2><a name="meshCollision"></a>Mesh collision detection</h2>
<pre class="apiList">
<a href="?#simGeom.getMeshMeshCollision">simGeom.getMeshMeshCollision</a>
<a href="?#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>
<a href="?#simGeom.getMeshTriangleCollision">simGeom.getMeshTriangleCollision</a>
<a href="?#simGeom.getMeshSegmentCollision">simGeom.getMeshSegmentCollision</a>
</pre>

<h2><a name="octreeCollision"></a>OC-tree collision detection</h2>
<pre class="apiList">
<a href="?#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>
<a href="?#simGeom.getOctreeOctreeCollision">simGeom.getOctreeOctreeCollision</a>
<a href="?#simGeom.getOctreePtcloudCollision">simGeom.getOctreePtcloudCollision</a>
<a href="?#simGeom.getOctreeTriangleCollision">simGeom.getOctreeTriangleCollision</a>
<a href="?#simGeom.getOctreeSegmentCollision">simGeom.getOctreeSegmentCollision</a>
<a href="?#simGeom.getOctreePointCollision">simGeom.getOctreePointCollision</a>
</pre>

<h2><a name="ptcloudCollision"></a>Point-cloud collision detection</h2>
<pre class="apiList">
<a href="?#simGeom.getOctreePtcloudCollision">simGeom.getOctreePtcloudCollision</a>
</pre>

<h2><a name="meshDistance"></a>Mesh minimum distance calculation</h2>
<pre class="apiList">
<a href="?#simGeom.getMeshMeshDistance">simGeom.getMeshMeshDistance</a>
<a href="?#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>
<a href="?#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>
<a href="?#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>
<a href="?#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>
<a href="?#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>
</pre>

<h2><a name="octreeDistance"></a>OC-tree minimum distance calculation</h2>
<pre class="apiList">
<a href="?#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>
<a href="?#simGeom.getOctreeOctreeDistance">simGeom.getOctreeOctreeDistance</a>
<a href="?#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>
<a href="?#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>
<a href="?#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>
<a href="?#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>
</pre>

<h2><a name="ptcloudDistance"></a>Point-cloud minimum distance calculation</h2>
<pre class="apiList">
<a href="?#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>
<a href="?#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>
<a href="?#simGeom.getPtcloudPtcloudDistance">simGeom.getPtcloudPtcloudDistance</a>
<a href="?#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>
<a href="?#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>
<a href="?#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>
</pre>

<h2><a name="primitiveDistance"></a>Primitives minimum distance calculation</h2>
<pre class="apiList">
<a href="?#simGeom.getBoxBoxDistance">simGeom.getBoxBoxDistance</a>
<a href="?#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>
<a href="?#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>
<a href="?#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>
<a href="?#simGeom.getTriangleTriangleDistance">simGeom.getTriangleTriangleDistance</a>
<a href="?#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>
<a href="?#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a>
<a href="?#simGeom.getSegmentSegmentDistance">simGeom.getSegmentSegmentDistance</a>
<a href="?#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a>
</pre>

<h2><a name="other"></a>Other API functions</h2>
<pre class="apiList">
<a href="?#simGeom.getTransformedPoints">simGeom.getTransformedPoints</a>
</pre>

</td></tr>

<tr><td id="commands" class="section">
<p class="subsectionBar">
<a name="simGeom.copyMesh" id="simGeom.copyMesh"></a>simGeom.copyMesh</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Duplicates a mesh object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int meshCopyHandle=simGeom.copyMesh(int meshHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the mesh object to duplicate.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>meshCopyHandle</strong>: the copy of the mesh object in case of success.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int meshCopyHandle=simGeom.copyMesh(int meshHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createMesh">simGeom.createMesh</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.copyOctree" id="simGeom.copyOctree"></a>simGeom.copyOctree</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Duplicates an OC-tree object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int octreeCopyHandle=simGeom.copyOctree(int octreeHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the OC-tree object to duplicate.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>octreeCopyHandle</strong>: the handle of the duplicated OC-tree object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int octreeCopyHandle=simGeom.copyOctree(int octreeHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.copyPtcloud" id="simGeom.copyPtcloud"></a>simGeom.copyPtcloud</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Duplicates a point-cloud object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int ptcloudCopyHandle=simGeom.copyPtcloud(int ptcloudHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>ptcloudHandle</strong>: the point-cloud object to duplicate.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>ptcloudCopyHandle</strong>: the handle of the duplicated point-cloud object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int ptcloudCopyHandle=simGeom.copyPtcloud(int ptcloudHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createMesh" id="simGeom.createMesh"></a>simGeom.createMesh</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a mesh object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int meshHandle=simGeom.createMesh(float[] vertices,int[] indices,float[3] meshOriginPos=nil,float[4] meshOriginQuat=nil,float triangleEdgeMaxLength=0.3,int maxTrianglesInBoundingBox=8)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>vertices</strong>: a table with the vertices of the mesh, expressed relative to the world origin.</div>
<div><strong>indices</strong>: a table with the indices of the mesh.</div>
<div><strong>meshOriginPos</strong>: the transformation frame position of the mesh. Can be omitted, in which case the frame of the mesh is located at the world origin.</div>
<div><strong>meshOriginQuat</strong>: the transformation frame quaternion of the mesh. Can be omitted, in which case the frame of the mesh is oriented as the world reference frame.</div>
<div><strong>triangleEdgeMaxLength</strong>: the maximum triangle size used internally for efficient calculations. A smaller size usually results in faster calculations, but larger calculation structures. Can be omitted.</div>
<div><strong>maxTrianglesInBoundingBox</strong>: the maximum number of triangles in leaf bounding boxes, used internally for efficient calculations. A smaller value usually results in faster calculations, but larger calculation structures. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>meshHandle</strong>: the handle to the mesh object in case of success.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int meshHandle=simGeom.createMesh(list vertices,list indices,list meshOriginPos=None,list meshOriginQuat=None,float triangleEdgeMaxLength=0.3,int maxTrianglesInBoundingBox=8)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.destroyMesh">simGeom.destroyMesh</a>, <a href="#simGeom.copyMesh">simGeom.copyMesh</a>, <a href="#simGeom.createMeshFromSerializationData">simGeom.createMeshFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createMeshFromSerializationData" id="simGeom.createMeshFromSerializationData"></a>simGeom.createMeshFromSerializationData</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a mesh object based on serialization data.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int meshHandle=simGeom.createMeshFromSerializationData(buffer serializationData)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>serializationData</strong>: the serialization data previously generated with <a href="#simGeom.getMeshSerializationData">simGeom.getMeshSerializationData</a>.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>meshHandle</strong>: the handle of the created mesh.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int meshHandle=simGeom.createMeshFromSerializationData(bytes serializationData)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshSerializationData">simGeom.getMeshSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createOctreeFromColorPoints" id="simGeom.createOctreeFromColorPoints"></a>simGeom.createOctreeFromColorPoints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an OC-tree object from several points with individual colors and individual user data.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int octreeHandle=simGeom.createOctreeFromColorPoints(float[] points,float[3] octreeOriginPos=nil,float[4] octreeOriginQuat=nil,float cellS=0.05,int[] rgbData=nil,int[] usrData=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>points</strong>: a table with point data, expressed relative to the world origin.</div>
<div><strong>octreeOriginPos</strong>: the transformation frame position of the OC-tree. Can be omitted, in which case the frame of the OC-tree is located at the world origin.</div>
<div><strong>octreeOriginQuat</strong>: the transformation frame quaternion of the OC-tree. Can be omitted, in which case the frame orientation of the OC-tree is same as the world origin.</div>
<div><strong>cellS</strong>: The desired OC-tree voxel size. Can be omitted.</div>
<div><strong>rgbData</strong>: the RGB colors (0-255)of the various points (i.e. one color per point). Can be omitted.</div>
<div><strong>usrData</strong>: the user data of the various points (i.e. one user data per point). Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>octreeHandle</strong>: the handle of the created OC-tree object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int octreeHandle=simGeom.createOctreeFromColorPoints(list points,list octreeOriginPos=None,list octreeOriginQuat=None,float cellS=0.05,list rgbData=None,list usrData=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createOctreeFromPoints">simGeom.createOctreeFromPoints</a>, <a href="#simGeom.createOctreeFromMesh">simGeom.createOctreeFromMesh</a>, <a href="#simGeom.createOctreeFromOctree">simGeom.createOctreeFromOctree</a>, <a href="#simGeom.destroyOctree">simGeom.destroyOctree</a>, <a href="#simGeom.copyOctree">simGeom.copyOctree</a>, <a href="#simGeom.createOctreeFromSerializationData">simGeom.createOctreeFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createOctreeFromMesh" id="simGeom.createOctreeFromMesh"></a>simGeom.createOctreeFromMesh</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an OC-tree object from a mesh object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int octreeHandle=simGeom.createOctreeFromMesh(int meshHandle,float[3] meshPos,float[4] meshQuat,float[3] octreeOriginPos=nil,float[4] octreeOriginQuat=nil,float cellS=0.05,int[3] rgbData=nil,int usrData=0)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh object.</div>
<div><strong>meshQuat</strong>: the quaternion of the mesh object.</div>
<div><strong>octreeOriginPos</strong>: the transformation frame position of the OC-tree. Can be omitted, in which case the frame of the OC-tree is located at the world origin.</div>
<div><strong>octreeOriginQuat</strong>: the transformation frame quaternion of the OC-tree. Can be omitted, in which case the frame orientation of the OC-tree is same as the world origin.</div>
<div><strong>cellS</strong>: The desired OC-tree voxel size. Can be omitted.</div>
<div><strong>rgbData</strong>: the RGB color (0-255) of the generated voxels. Can be omitted.</div>
<div><strong>usrData</strong>: the user data of the generated voxels. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>octreeHandle</strong>: the handle of the created OC-tree object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int octreeHandle=simGeom.createOctreeFromMesh(int meshHandle,list meshPos,list meshQuat,list octreeOriginPos=None,list octreeOriginQuat=None,float cellS=0.05,list rgbData=None,int usrData=0)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createOctreeFromPoints">simGeom.createOctreeFromPoints</a>,<a href="#simGeom.createOctreeFromColorPoints">simGeom.createOctreeFromColorPoints</a>, <a href="#simGeom.createOctreeFromOctree">simGeom.createOctreeFromOctree</a>, <a href="#simGeom.destroyOctree">simGeom.destroyOctree</a>, <a href="#simGeom.copyOctree">simGeom.copyOctree</a>, <a href="#simGeom.createOctreeFromSerializationData">simGeom.createOctreeFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createOctreeFromOctree" id="simGeom.createOctreeFromOctree"></a>simGeom.createOctreeFromOctree</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an OC-tree object from another OC-tree object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int newOctreeHandle=simGeom.createOctreeFromOctree(int octreeHandle,float[3] octreepos,float[4] octreeQuat,float[3] newOctreeOriginPos=nil,float[4] newOctreeOriginQuat=nil,float newOctreeCellS=0.05,int[3] rgbData=nil,int usrData=0)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle to the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree object.</div>
<div><strong>octreeQuat</strong>: the quaternion of the OC-tree object.</div>
<div><strong>newOctreeOriginPos</strong>: the transformation frame position of the new OC-tree. Can be omitted, in which case the frame of the new OC-tree is located at the world origin.</div>
<div><strong>newOctreeOriginQuat</strong>: the transformation frame quaternion of the new OC-tree. Can be omitted, in which case the frame orientation of the new OC-tree is same as the world origin.</div>
<div><strong>newOctreeCellS</strong>: The desired OC-tree voxel size. Can be omitted.</div>
<div><strong>rgbData</strong>: the RGB color (0-255) of the generated voxels. Can be omitted.</div>
<div><strong>usrData</strong>: the user data of the generated voxels. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>newOctreeHandle</strong>: the handle of the new OC-tree object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int newOctreeHandle=simGeom.createOctreeFromOctree(int octreeHandle,list octreepos,list octreeQuat,list newOctreeOriginPos=None,list newOctreeOriginQuat=None,float newOctreeCellS=0.05,list rgbData=None,int usrData=0)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createOctreeFromPoints">simGeom.createOctreeFromPoints</a>,<a href="#simGeom.createOctreeFromColorPoints">simGeom.createOctreeFromColorPoints</a>, <a href="#simGeom.createOctreeFromMesh">simGeom.createOctreeFromMesh</a>, <a href="#simGeom.destroyOctree">simGeom.destroyOctree</a>, <a href="#simGeom.copyOctree">simGeom.copyOctree</a>, <a href="#simGeom.createOctreeFromSerializationData">simGeom.createOctreeFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createOctreeFromPoints" id="simGeom.createOctreeFromPoints"></a>simGeom.createOctreeFromPoints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an OC-tree object from several points.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int octreeHandle=simGeom.createOctreeFromPoints(float[] points,float[3] octreeOriginPos=nil,float[4] octreeOriginQuat=nil,float cellS=0.05,int[] rgbData=nil,int usrData=0)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>points</strong>: an table with point data, expressed relative to the world origin.</div>
<div><strong>octreeOriginPos</strong>: the transformation frame position of the OC-tree. Can be omitted, in which case the frame position of the OC-tree is located at the world origin.</div>
<div><strong>octreeOriginQuat</strong>: the transformation frame quaternion of the OC-tree. Can be omitted, in which case the frame orientation of the OC-tree is same as the world origin.</div>
<div><strong>cellS</strong>: The desired OC-tree voxel size. Can be omitted.</div>
<div><strong>rgbData</strong>: the RGB color (0-255) of the generated voxels. Can be omitted.</div>
<div><strong>usrData</strong>: the user data of the generated voxels. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>octreeHandle</strong>: the handle of the created OC-tree object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int octreeHandle=simGeom.createOctreeFromPoints(list points,list octreeOriginPos=None,list octreeOriginQuat=None,float cellS=0.05,list rgbData=None,int usrData=0)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createOctreeFromColorPoints">simGeom.createOctreeFromColorPoints</a>, <a href="#simGeom.createOctreeFromMesh">simGeom.createOctreeFromMesh</a>, <a href="#simGeom.createOctreeFromOctree">simGeom.createOctreeFromOctree</a>, <a href="#simGeom.destroyOctree">simGeom.destroyOctree</a>, <a href="#simGeom.copyOctree">simGeom.copyOctree</a>, <a href="#simGeom.createOctreeFromSerializationData">simGeom.createOctreeFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createOctreeFromSerializationData" id="simGeom.createOctreeFromSerializationData"></a>simGeom.createOctreeFromSerializationData</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates an OC-tree object based on serialization data.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int octreeHandle=simGeom.createOctreeFromSerializationData(buffer serializationData)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>serializationData</strong>: the serialization data previously generated with <a href="#simGeom.getOctreeSerializationData">simGeom.getOctreeSerializationData</a>.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>octreeHandle</strong>: the handle to the created OC-tree object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int octreeHandle=simGeom.createOctreeFromSerializationData(bytes serializationData)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getOctreeSerializationData">simGeom.getOctreeSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createPtcloudFromColorPoints" id="simGeom.createPtcloudFromColorPoints"></a>simGeom.createPtcloudFromColorPoints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a point-cloud object from several points with individual colors.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int ptcloudHandle=simGeom.createPtcloudFromColorPoints(float[] points,float[3] ptcloudOriginPos=nil,float[4] ptcloudOriginQuat=nil,float cellS=0.05,int maxPointCnt=20,int[] rgbData=nil,float proximityTol=0.005)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>points</strong>: a table with point data, expressed relative to the world origin.</div>
<div><strong>ptcloudOriginPos</strong>: the transformation frame position of the point-cloud. Can be omitted, in which case the frame of the point-cloud is located at the world origin.</div>
<div><strong>ptcloudOriginQuat</strong>: the transformation frame quaternion of the point-cloud. Can be omitted, in which case the frame orientation of the point-cloud is same as the world origin.</div>
<div><strong>cellS</strong>: The desired voxel size of the underlying OC-tree. Can be omitted.</div>
<div><strong>maxPointCnt</strong>: The maximum amount of points inside of a OC-tree voxel. Can be omitted.</div>
<div><strong>rgbData</strong>: the RGB color (0-255) of the generated points. Specify one color per point. Can be omitted.</div>
<div><strong>proximityTol</strong>: the distance tolerance to other points (i.e. point-point distances below the specified value are not permitted and points will be omitted). Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>ptcloudHandle</strong>: the handle to the created point-cloud object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int ptcloudHandle=simGeom.createPtcloudFromColorPoints(list points,list ptcloudOriginPos=None,list ptcloudOriginQuat=None,float cellS=0.05,int maxPointCnt=20,list rgbData=None,float proximityTol=0.005)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createPtcloudFromPoints">simGeom.createPtcloudFromPoints</a>, <a href="#simGeom.destroyPtcloud">simGeom.destroyPtcloud</a>, <a href="#simGeom.copyPtcloud">simGeom.copyPtcloud</a>, <a href="#simGeom.createPtcloudFromSerializationData">simGeom.createPtcloudFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createPtcloudFromPoints" id="simGeom.createPtcloudFromPoints"></a>simGeom.createPtcloudFromPoints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a point-cloud object from several points.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int ptcloudHandle=simGeom.createPtcloudFromPoints(float[] points,float[3] ptcloudOriginPos=nil,float[4] ptcloudOriginQuat=nil,float cellS=0.05,int maxPointCnt=20,int[3] rgbData=nil,float proximityTol=0.005)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>points</strong>: a table with point data, expressed relative to the world origin.</div>
<div><strong>ptcloudOriginPos</strong>: the transformation frame position of the point-cloud. Can be omitted, in which case the frame of the point-cloud is located at the world origin.</div>
<div><strong>ptcloudOriginQuat</strong>: the transformation frame quaternion of the point-cloud. Can be omitted, in which case the frame orientation of the point-cloud is same as the world origin.</div>
<div><strong>cellS</strong>: The desired voxel size of the underlying OC-tree. Can be omitted.</div>
<div><strong>maxPointCnt</strong>: The maximum amount of points inside of a OC-tree voxel. Can be omitted.</div>
<div><strong>rgbData</strong>: the RGB color (0-255) of the generated points. Can be omitted.</div>
<div><strong>proximityTol</strong>: the distance tolerance to other points (i.e. point-point distances below the specified value are not permitted and points will be omitted). Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>ptcloudHandle</strong>: the handle to the created point-cloud object.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int ptcloudHandle=simGeom.createPtcloudFromPoints(list points,list ptcloudOriginPos=None,list ptcloudOriginQuat=None,float cellS=0.05,int maxPointCnt=20,list rgbData=None,float proximityTol=0.005)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createPtcloudFromColorPoints">simGeom.createPtcloudFromColorPoints</a>, <a href="#simGeom.destroyPtcloud">simGeom.destroyPtcloud</a>, <a href="#simGeom.copyPtcloud">simGeom.copyPtcloud</a>, <a href="#simGeom.createPtcloudFromSerializationData">simGeom.createPtcloudFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.createPtcloudFromSerializationData" id="simGeom.createPtcloudFromSerializationData"></a>simGeom.createPtcloudFromSerializationData</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Creates a point-cloud object based on serialization data.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">int ptcloudHandle=simGeom.createPtcloudFromSerializationData(buffer serializationData)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>serializationData</strong>: the serialization data previously generated with <a href="#simGeom.getPtcloudSerializationData">simGeom.getPtcloudSerializationData</a>.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>ptcloudHandle</strong>: the handle of the created point-cloud.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">int ptcloudHandle=simGeom.createPtcloudFromSerializationData(bytes serializationData)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getPtcloudSerializationData">simGeom.getPtcloudSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.destroyMesh" id="simGeom.destroyMesh"></a>simGeom.destroyMesh</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Destroys a mesh object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simGeom.destroyMesh(int meshHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet"></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simGeom.destroyMesh(int meshHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createMesh">simGeom.createMesh</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.destroyOctree" id="simGeom.destroyOctree"></a>simGeom.destroyOctree</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Destroys an OC-tree object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simGeom.destroyOctree(int octreeHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet"></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simGeom.destroyOctree(int octreeHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createOctreeFromPoints">simGeom.createOctreeFromPoints</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.destroyPtcloud" id="simGeom.destroyPtcloud"></a>simGeom.destroyPtcloud</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Destroys a point-cloud object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn"> simGeom.destroyPtcloud(int ptcloudHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet"></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn"> simGeom.destroyPtcloud(int ptcloudHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createPtcloudFromPoints">simGeom.createPtcloudFromPoints</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getBoxBoxDistance" id="simGeom.getBoxBoxDistance"></a>simGeom.getBoxBoxDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between two cuboids.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] distSegPt1,float[3] distSegPt2=simGeom.getBoxBoxDistance(float[3] box1Pos,float[4] box1Quat,float[3] box1HalfSize,float[3] box2Pos,float[4] box2Quat,float[3] box2HalfSize,bool boxesAreSolid,bool altRoutine=false)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>box1Pos</strong>: the position of the first cuboid.</div> <div><strong>box1Quat</strong>: the quaternion of the first cuboid.</div>
<div><strong>box1HalfSize</strong>: the half-size of the first cuboid.</div>
<div><strong>box2Pos</strong>: the position of the second cuboid.</div> <div><strong>box2Quat</strong>: the quaternion of the second cuboid.</div>
<div><strong>box2HalfSize</strong>: the half-size of the second cuboid.</div>
<div><strong>boxesAreSolid</strong>: whether the two cuboids are solid. If true, then cuboid A being fully encompassed by cuboid B will always lead to a distance of zero between the two cuboids.</div>
<div><strong>altRoutine</strong>: if true, an alternative calculation routine will be used. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>distSegPt1</strong>: the minimum distance point on the first cuboid.</div>
<div><strong>distSegPt2</strong>: the minimum distance point on the second cuboid.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list distSegPt1,list distSegPt2=simGeom.getBoxBoxDistance(list box1Pos,list box1Quat,list box1HalfSize,list box2Pos,list box2Quat,list box2HalfSize,bool boxesAreSolid,bool altRoutine=False)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getBoxPointDistance" id="simGeom.getBoxPointDistance"></a>simGeom.getBoxPointDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a cuboid and a point.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] boxDistSegPt=simGeom.getBoxPointDistance(float[3] boxPos,float[3] boxQuat,float[3] boxHalfSize,bool boxIsSolid,float[3] point)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>boxPos</strong>: the position of the cuboid.</div> <div><strong>boxQuat</strong>: the quaternion of the cuboid.</div>
<div><strong>boxHalfSize</strong>: the half-size of the cuboid.</div>
<div><strong>boxIsSolid</strong>: whether the cuboid is solid. If true, then the point being fully encompassed by the cuboid will always lead to a distance of zero.</div>
<div><strong>point</strong>: position of the point.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>boxDistSegPt</strong>: the minimum distance point on the cuboid.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list boxDistSegPt=simGeom.getBoxPointDistance(list boxPos,list boxQuat,list boxHalfSize,bool boxIsSolid,list point)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>, <a href="#simGeom.getBoxBoxDistance">simGeom.getBoxBoxDistance</a>, <a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getBoxSegmentDistance" id="simGeom.getBoxSegmentDistance"></a>simGeom.getBoxSegmentDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a cuboid and a segment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] boxDistSegPt,float[3] segmentSegPt=simGeom.getBoxSegmentDistance(float[3] boxPos,float[3] boxQuat,float[3] boxHalfSize,bool boxIsSolid,float[3] segmentEndPoint,float[3] segmentVector,bool altRoutine=false)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>boxPos</strong>: the position of the cuboid.</div> <div><strong>boxQuat</strong>: the quaternion of the cuboid.</div>
<div><strong>boxHalfSize</strong>: the half-size of the cuboid.</div>
<div><strong>boxIsSolid</strong>: whether the cuboid is solid. If true, then the segment being fully encompassed by the cuboid will always lead to a distance of zero.</div>
<div><strong>segmentEndPoint</strong>: position of vertex A on the segment.</div>
<div><strong>segmentVector</strong>: vector stretching from vertex A to vertex B on the segment.</div>
<div><strong>altRoutine</strong>: if true, an alternative calculation routine will be used. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>boxDistSegPt</strong>: the minimum distance point on the cuboid.</div>
<div><strong>segmentSegPt</strong>: the minimum distance point on the segment.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list boxDistSegPt,list segmentSegPt=simGeom.getBoxSegmentDistance(list boxPos,list boxQuat,list boxHalfSize,bool boxIsSolid,list segmentEndPoint,list segmentVector,bool altRoutine=False)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getBoxBoxDistance">simGeom.getBoxBoxDistance</a>, <a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getSegmentSegmentDistance">simGeom.getSegmentSegmentDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getBoxTriangleDistance" id="simGeom.getBoxTriangleDistance"></a>simGeom.getBoxTriangleDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a cuboid and a triangle.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] boxDistSegPt,float[3] triangleDistSegPt=simGeom.getBoxTriangleDistance(float[3] boxPos,float[3] boxQuat,float[3] boxHalfSize,bool boxIsSolid,float[3] p,float[3] v,float[3] w,bool altRoutine=false)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>boxPos</strong>: the position of the cuboid.</div> <div><strong>boxQuat</strong>: the quaternion of the cuboid.</div>
<div><strong>boxHalfSize</strong>: the half-size of the cuboid.</div>
<div><strong>boxIsSolid</strong>: whether the cuboid is solid. If true, then the triangle being fully encompassed by the cuboid will always lead to a distance of zero.</div>
<div><strong>p</strong>: position of vertex A on the triangle.</div>
<div><strong>v</strong>: vector stretching from vertex A to vertex B on the triangle.</div>
<div><strong>w</strong>: vector stretching from vertex A to vertex C on the triangle.</div>
<div><strong>altRoutine</strong>: if true, an alternative calculation routine will be used. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>boxDistSegPt</strong>: the minimum distance point on the cuboid.</div>
<div><strong>triangleDistSegPt</strong>: the minimum distance point on the triangle.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list boxDistSegPt,list triangleDistSegPt=simGeom.getBoxTriangleDistance(list boxPos,list boxQuat,list boxHalfSize,bool boxIsSolid,list p,list v,list w,bool altRoutine=False)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getBoxBoxDistance">simGeom.getBoxBoxDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>, <a href="#simGeom.getTriangleTriangleDistance">simGeom.getTriangleTriangleDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshMeshCollision" id="simGeom.getMeshMeshCollision"></a>simGeom.getMeshMeshCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between two mesh objects.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int[2] caching,float[] intersections=simGeom.getMeshMeshCollision(int mesh1Handle,float[3] mesh1Pos,float[4] mesh1Quat,int mesh2Handle,float[3] mesh2Pos,float[4] mesh2Quat,int[2] caching=nil,bool returnIntersections=false)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>mesh1Handle</strong>: the handle of the first mesh object.</div>
<div><strong>mesh1Pos</strong>: the position of the first mesh object.</div>
<div><strong>mesh1Quat</strong>: the quaternion of the first mesh object.</div>
<div><strong>mesh2Handle</strong>: the handle of the second mesh object.</div>
<div><strong>mesh2Pos</strong>: the position of the second mesh object.</div>
<div><strong>mesh2Quat</strong>: the quaternion of the second mesh object.</div>
<div><strong>caching</strong>: a table with two values from previous collision checking between the same two entities, to speed-up calculations.</div>
<div><strong>returnIntersections</strong>: whether the interference segments should be computed and returned.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next collision checking between the same two entities (memorizes the colliding triangle in the two meshes).</div>
<div><strong>intersections</strong>: the interference segments.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,list caching,list intersections=simGeom.getMeshMeshCollision(int mesh1Handle,list mesh1Pos,list mesh1Quat,int mesh2Handle,list mesh2Pos,list mesh2Quat,list caching=None,bool returnIntersections=False)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>, <a href="#simGeom.getMeshTriangleCollision">simGeom.getMeshTriangleCollision</a>, <a href="#simGeom.getMeshSegmentCollision">simGeom.getMeshSegmentCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshMeshDistance" id="simGeom.getMeshMeshDistance"></a>simGeom.getMeshMeshDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between two mesh objects.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] minDistSegPt1,float[3] minDistSegPt2,int[2] caching=simGeom.getMeshMeshDistance(int mesh1Handle,float[3] mesh1Pos,float[4] mesh1Quat,int mesh2Handle,float[3] mesh2Pos,float[4] mesh2Quat,float thresholdDist=nil,int[2] caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>mesh1Handle</strong>: the handle of the first mesh object.</div>
<div><strong>mesh1Pos</strong>: the position of the first mesh.</div> <div><strong>mesh1Quat</strong>: the quaternion of the first mesh.</div>
<div><strong>mesh2Handle</strong>: the handle of the second mesh object.</div>
<div><strong>mesh2Pos</strong>: the position of the second mesh.</div> <div><strong>mesh2Quat</strong>: the quaternion of the second mesh.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a table with two values from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>minDistSegPt1</strong>: the minimum distance point on the first mesh. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>minDistSegPt2</strong>: the minimum distance point on the second mesh. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list minDistSegPt1,list minDistSegPt2,list caching=simGeom.getMeshMeshDistance(int mesh1Handle,list mesh1Pos,list mesh1Quat,int mesh2Handle,list mesh2Pos,list mesh2Quat,float thresholdDist=None,list caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshOctreeCollision" id="simGeom.getMeshOctreeCollision"></a>simGeom.getMeshOctreeCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between a mesh object and an OC-tree object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int[2] caching=simGeom.getMeshOctreeCollision(int meshHandle,float[3] meshPos,float[4] meshQuat,int octreeHandle,float[3] octreePos,float[4] octreeQuat,int[2] caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh.</div> <div><strong>meshQuat</strong>: the quaternion of the mesh.</div>
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>caching</strong>: a table with two values from previous collision checking between the same two entities, to speed-up calculations.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status.</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next collision checking between the same two entities.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,list caching=simGeom.getMeshOctreeCollision(int meshHandle,list meshPos,list meshQuat,int octreeHandle,list octreePos,list octreeQuat,list caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshMeshCollision">simGeom.getMeshMeshCollision</a>, <a href="#simGeom.getMeshTriangleCollision">simGeom.getMeshTriangleCollision</a>, <a href="#simGeom.getMeshSegmentCollision">simGeom.getMeshSegmentCollision</a>, <a href="#simGeom.getOctreeOctreeCollision">simGeom.getOctreeOctreeCollision</a>, <a href="#simGeom.getOctreePtcloudCollision">simGeom.getOctreePtcloudCollision</a>, <a href="#simGeom.getOctreeTriangleCollision">simGeom.getOctreeTriangleCollision</a>, <a href="#simGeom.getOctreeSegmentCollision">simGeom.getOctreeSegmentCollision</a>, <a href="#simGeom.getOctreePointCollision">simGeom.getOctreePointCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshOctreeDistance" id="simGeom.getMeshOctreeDistance"></a>simGeom.getMeshOctreeDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a mesh object and an OC-tree object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] meshMinDistPt,float[3] ocMinDistPt,int[2] caching=simGeom.getMeshOctreeDistance(int meshHandle,float[3] meshPos,float[4] meshQuat,int octreeHandle,float[3] octreePos,float[4] octreeQuat,float thresholdDist=nil,int[2] caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh.</div> <div><strong>meshQuat</strong>: the quaternion of the mesh.</div>
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a table with two values from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>meshMinDistPt</strong>: the minimum distance point on the mesh. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>ocMinDistPt</strong>: the minimum distance point on the OC-tree. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list meshMinDistPt,list ocMinDistPt,list caching=simGeom.getMeshOctreeDistance(int meshHandle,list meshPos,list meshQuat,int octreeHandle,list octreePos,list octreeQuat,float thresholdDist=None,list caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshMeshDistance">simGeom.getMeshMeshDistance</a>, <a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreeOctreeDistance">simGeom.getOctreeOctreeDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshPointDistance" id="simGeom.getMeshPointDistance"></a>simGeom.getMeshPointDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a mesh object and a point.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] meshMinDistPt,int caching=simGeom.getMeshPointDistance(int meshHandle,float[3] meshPos,float[4] meshQuat,float[3] point,float thresholdDist=nil,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh.</div> <div><strong>meshQuat</strong>: the quaternion of the mesh.</div>
<div><strong>point</strong>: the position of the point.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>meshMinDistPt</strong>: the minimum distance point on the mesh. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list meshMinDistPt,int caching=simGeom.getMeshPointDistance(int meshHandle,list meshPos,list meshQuat,list point,float thresholdDist=None,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshMeshDistance">simGeom.getMeshMeshDistance</a>, <a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>, <a href="#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshPtcloudDistance" id="simGeom.getMeshPtcloudDistance"></a>simGeom.getMeshPtcloudDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a mesh object and a point-cloud object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] meshMinDistPt,float[3] pcMinDistPt,int[2] caching=simGeom.getMeshPtcloudDistance(int meshHandle,float[3] meshPos,float[4] meshQuat,int ptcloudHandle,float[3] pcPos,float[4] pcQuat,float thresholdDist=nil,int[2] caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh.</div> <div><strong>meshQuat</strong>: the quaternion of the mesh.</div>
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
<div><strong>pcPos</strong>: the position of the point-cloud.</div> <div><strong>pcQuat</strong>: the quaternion of the point-cloud.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a table with two values from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>meshMinDistPt</strong>: the minimum distance point on the mesh. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>pcMinDistPt</strong>: the minimum distance point on the point-cloud. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list meshMinDistPt,list pcMinDistPt,list caching=simGeom.getMeshPtcloudDistance(int meshHandle,list meshPos,list meshQuat,int ptcloudHandle,list pcPos,list pcQuat,float thresholdDist=None,list caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshMeshDistance">simGeom.getMeshMeshDistance</a>, <a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getPtcloudPtcloudDistance">simGeom.getPtcloudPtcloudDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshSegmentCollision" id="simGeom.getMeshSegmentCollision"></a>simGeom.getMeshSegmentCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between a mesh object and a segment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int caching,float[] intersections=simGeom.getMeshSegmentCollision(int meshHandle,float[3] meshPos,float[4] meshQuat,float[3] segmentExtremity,float[3] segmentVector,int caching=-1,bool returnIntersections)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh.</div> <div><strong>meshQuat</strong>: the quaternion of the mesh.</div>
<div><strong>segmentExtremity</strong>: position of vertex A on the segment.</div>
<div><strong>segmentVector</strong>: vector stretching from vertex A to vertex B on the segment.</div>
<div><strong>caching</strong>: a values from previous collision checking between the same two entities, to speed-up collision checking. Can be omitted or set to -1.</div>
<div><strong>returnIntersections</strong>: whether the interference segments should be returned. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next collision checking between the same two entities.</div>
<div><strong>intersections</strong>: the interference segments which actually represent one or more segments with zero length.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,int caching,list intersections=simGeom.getMeshSegmentCollision(int meshHandle,list meshPos,list meshQuat,list segmentExtremity,list segmentVector,int caching=-1,bool returnIntersections)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshMeshCollision">simGeom.getMeshMeshCollision</a>, <a href="#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>, <a href="#simGeom.getMeshTriangleCollision">simGeom.getMeshTriangleCollision</a>, <a href="#simGeom.getOctreeSegmentCollision">simGeom.getOctreeSegmentCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshSegmentDistance" id="simGeom.getMeshSegmentDistance"></a>simGeom.getMeshSegmentDistance</p>
<table class="apiTable">


<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a mesh object and a segment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] meshMinDistPt,float[3] segmentDistSegPt,int caching=simGeom.getMeshSegmentDistance(int meshHandle,float[3] meshPos,float[4] meshQuat,float[3] segmentEndPoint,float[3] segmentVector,float thresholdDist=nil,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh.</div> <div><strong>meshQuat</strong>: the quaternion of the mesh.</div>
<div><strong>segmentEndPoint</strong>: position of vertex A on the segment.</div>
<div><strong>segmentVector</strong>: vector stretching from vertex A to vertex B on the segment.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>meshMinDistPt</strong>: the minimum distance point on the mesh. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>segmentDistSegPt</strong>: the minimum distance point on the segment. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list meshMinDistPt,list segmentDistSegPt,int caching=simGeom.getMeshSegmentDistance(int meshHandle,list meshPos,list meshQuat,list segmentEndPoint,list segmentVector,float thresholdDist=None,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshMeshDistance">simGeom.getMeshMeshDistance</a>, <a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getSegmentSegmentDistance">simGeom.getSegmentSegmentDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshSerializationData" id="simGeom.getMeshSerializationData"></a>simGeom.getMeshSerializationData</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the serialization data from a mesh object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">buffer serializationData=simGeom.getMeshSerializationData(int meshHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>serializationData</strong>: the serialization data.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bytes serializationData=simGeom.getMeshSerializationData(int meshHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createMeshFromSerializationData">simGeom.createMeshFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshTriangleCollision" id="simGeom.getMeshTriangleCollision"></a>simGeom.getMeshTriangleCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between a mesh object and a triangle.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int caching,float[] intersections=simGeom.getMeshTriangleCollision(int meshHandle,float[3] meshPos,float[4] meshQuat,float[3] p,float[3] v,float[3] w,int caching=-1,bool returnIntersections)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh.</div> <div><strong>meshQuat</strong>: the quaternion of the mesh.</div>
<div><strong>p</strong>: position of vertex A on the triangle.</div>
<div><strong>v</strong>: vector stretching from vertex A to vertex B on the triangle.</div>
<div><strong>w</strong>: vector stretching from vertex A to vertex C on the triangle.</div>
<div><strong>caching</strong>: a values from previous collision checking between the same two entities, to speed-up collision checking. Can be omitted or set to -1.</div>
<div><strong>returnIntersections</strong>: whether the interference segments should be returned. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next collision checking between the same two entities.</div>
<div><strong>intersections</strong>: the interference segments.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,int caching,list intersections=simGeom.getMeshTriangleCollision(int meshHandle,list meshPos,list meshQuat,list p,list v,list w,int caching=-1,bool returnIntersections)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshMeshCollision">simGeom.getMeshMeshCollision</a>, <a href="#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>, <a href="#simGeom.getMeshSegmentCollision">simGeom.getMeshSegmentCollision</a>, <a href="#simGeom.getOctreeTriangleCollision">simGeom.getOctreeTriangleCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getMeshTriangleDistance" id="simGeom.getMeshTriangleDistance"></a>simGeom.getMeshTriangleDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a mesh object and a triangle.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] meshMinDistPt,float[3] triangleMinDistPt,int caching=simGeom.getMeshTriangleDistance(int meshHandle,float[3] meshPos,float[4] meshQuat,float[3] p,float[3] v,float[3] w,float thresholdDist=nil,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>meshPos</strong>: the position of the mesh.</div> <div><strong>meshQuat</strong>: the quaternion of the mesh.</div>
<div><strong>p</strong>: position of vertex A on the triangle.</div>
<div><strong>v</strong>: vector stretching from vertex A to vertex B on the triangle.</div>
<div><strong>w</strong>: vector stretching from vertex A to vertex C on the triangle.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>meshMinDistPt</strong>: the minimum distance point on the mesh. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>triangleMinDistPt</strong>: the minimum distance point on the triangle. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list meshMinDistPt,list triangleMinDistPt,int caching=simGeom.getMeshTriangleDistance(int meshHandle,list meshPos,list meshQuat,list p,list v,list w,float thresholdDist=None,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshMeshDistance">simGeom.getMeshMeshDistance</a>, <a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getTriangleTriangleDistance">simGeom.getTriangleTriangleDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreeOctreeCollision" id="simGeom.getOctreeOctreeCollision"></a>simGeom.getOctreeOctreeCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between two OC-tree objects.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int caching=simGeom.getOctreeOctreeCollision(int oc1Handle,float[3] octree1Pos,float[4] octree1Quat,int oc2Handle,float[3] octree2Pos,float[4] octree2Quat,int[2] caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>oc1Handle</strong>: handle of the first OC-tree object.</div>
<div><strong>octree1Pos</strong>: the position of the first OC-tree.</div> <div><strong>octree1Pos</strong>: the quaternion of the first OC-tree.</div>
<div><strong>oc2Handle</strong>: handle of the second OC-tree object.</div>
<div><strong>octree2Pos</strong>: the position of the second OC-tree.</div> <div><strong>octree2Pos</strong>: the quaternion of the second OC-tree.</div>
<div><strong>caching</strong>: a table with two values from previous collision checking between the same two entities, to speed-up collision checking. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status.</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next collision checking between the same two entities.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,int caching=simGeom.getOctreeOctreeCollision(int oc1Handle,list octree1Pos,list octree1Quat,int oc2Handle,list octree2Pos,list octree2Quat,list caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>, <a href="#simGeom.getOctreePtcloudCollision">simGeom.getOctreePtcloudCollision</a>, <a href="#simGeom.getOctreeTriangleCollision">simGeom.getOctreeTriangleCollision</a>, <a href="#simGeom.getOctreeSegmentCollision">simGeom.getOctreeSegmentCollision</a>, <a href="#simGeom.getOctreePointCollision">simGeom.getOctreePointCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreeOctreeDistance" id="simGeom.getOctreeOctreeDistance"></a>simGeom.getOctreeOctreeDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between two OC-tree objects.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] oc1MinDistPt,float[3] oc2MinDistPt,int[2] caching=simGeom.getOctreeOctreeDistance(int oc1Handle,float[3] octree1Pos,float[4] octree1Quat,int oc2Handle,float[3] octree2Pos,float[4] octree2Quat,float thresholdDist=nil,int[2] caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>oc1Handle</strong>: the handle of the first OC-tree object.</div>
<div><strong>octree1Pos</strong>: the position of the first OC-tree.</div> <div><strong>octree1Pos</strong>: the quaternion of the first OC-tree.</div>
<div><strong>oc2Handle</strong>: the handle of the second OC-tree object.</div>
<div><strong>octree2Pos</strong>: the position of the second OC-tree.</div> <div><strong>octree2Pos</strong>: the quaternion of the second OC-tree.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a table with two values from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>oc1MinDistPt</strong>: the minimum distance point on the first OC-tree. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>oc2MinDistPt</strong>: the minimum distance point on the second OC-tree. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list oc1MinDistPt,list oc2MinDistPt,list caching=simGeom.getOctreeOctreeDistance(int oc1Handle,list octree1Pos,list octree1Quat,int oc2Handle,list octree2Pos,list octree2Quat,float thresholdDist=None,list caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreePointCollision" id="simGeom.getOctreePointCollision"></a>simGeom.getOctreePointCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between an OC-tree object and a point.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int caching=simGeom.getOctreePointCollision(int octreeHandle,float[3] octreePos,float[4] octreeQuat,float[3] point,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>point</strong>: a point expressed relative to the world reference frame.</div>
<div><strong>caching</strong>: a value from previous collision checking between the same two entities, to speed-up collision checking. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next collision checking between the same two entities.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,int caching=simGeom.getOctreePointCollision(int octreeHandle,list octreePos,list octreeQuat,list point,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>, <a href="#simGeom.getOctreeOctreeCollision">simGeom.getOctreeOctreeCollision</a>, <a href="#simGeom.getOctreePtcloudCollision">simGeom.getOctreePtcloudCollision</a>, <a href="#simGeom.getOctreeTriangleCollision">simGeom.getOctreeTriangleCollision</a>, <a href="#simGeom.getOctreeSegmentCollision">simGeom.getOctreeSegmentCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreePointDistance" id="simGeom.getOctreePointDistance"></a>simGeom.getOctreePointDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between an OC-tree object and a point.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] ocMinDistPt,int caching=simGeom.getOctreePointDistance(int octreeHandle,float[3] octreePos,float[4] octreeQuat,float[3] point,float thresholdDist=nil,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>point</strong>: the position of the point.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>ocMinDistPt</strong>: the minimum distance point on the OC-tree. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list ocMinDistPt,int caching=simGeom.getOctreePointDistance(int octreeHandle,list octreePos,list octreeQuat,list point,float thresholdDist=None,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreeOctreeDistance">simGeom.getOctreeOctreeDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>, <a href="#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreePtcloudCollision" id="simGeom.getOctreePtcloudCollision"></a>simGeom.getOctreePtcloudCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between am OC-tree object and a point-cloud object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int caching=simGeom.getOctreePtcloudCollision(int octreeHandle,float[3] octreePos,float[4] octreeQuat,int ptcloudHandle,float[3] ptcloudPos,float[4] ptcloudQuat,int[2] caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
<div><strong>ptcloudPos</strong>: the position of the point-cloud.</div> <div><strong>ptcloudQuat</strong>: the quaternion of the point-cloud.</div>
<div><strong>caching</strong>: a table with two values from previous collision checking between the same two entities, to speed-up collision checking..</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next collision checking between the same two entities.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,int caching=simGeom.getOctreePtcloudCollision(int octreeHandle,list octreePos,list octreeQuat,int ptcloudHandle,list ptcloudPos,list ptcloudQuat,list caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>, <a href="#simGeom.getOctreeOctreeCollision">simGeom.getOctreeOctreeCollision</a>, <a href="#simGeom.getOctreeTriangleCollision">simGeom.getOctreeTriangleCollision</a>, <a href="#simGeom.getOctreeSegmentCollision">simGeom.getOctreeSegmentCollision</a>, <a href="#simGeom.getOctreePointCollision">simGeom.getOctreePointCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreePtcloudDistance" id="simGeom.getOctreePtcloudDistance"></a>simGeom.getOctreePtcloudDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between an OC-tree object and a point-cloud object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] ocMinDistPt,float[3] pcMinDistPt,int[2] caching=simGeom.getOctreePtcloudDistance(int octreeHandle,float[3] octreePos,float[4] octreeQuat,int ptcloudHandle,float[3] pcPos,float[4] pcQuat,float thresholdDist=nil,int[2] caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
<div><strong>pcPos</strong>: the position of the point-cloud.</div> <div><strong>pcQuat</strong>: the quaternion of the point-cloud.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a table with two values from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>ocMinDistPt</strong>: the minimum distance point on the OC-tree. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>pcMinDistPt</strong>: the minimum distance point on the point-cloud. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list ocMinDistPt,list pcMinDistPt,list caching=simGeom.getOctreePtcloudDistance(int octreeHandle,list octreePos,list octreeQuat,int ptcloudHandle,list pcPos,list pcQuat,float thresholdDist=None,list caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getOctreeOctreeDistance">simGeom.getOctreeOctreeDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>, <a href="#simGeom.getPtcloudPtcloudDistance">simGeom.getPtcloudPtcloudDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreeSegmentCollision" id="simGeom.getOctreeSegmentCollision"></a>simGeom.getOctreeSegmentCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between an OC-tree object and a segment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int caching=simGeom.getOctreeSegmentCollision(int octreeHandle,float[3] octreePos,float[4] octreeQuat,float[3] segmentExtremity,float[3] segmentVector,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>segmentExtremity</strong>: position of vertex A on the segment.</div>
<div><strong>segmentVector</strong>: vector stretching from vertex A to vertex B on the segment.</div>
<div><strong>caching</strong>: a value from previous collision checking between the same two entities, to speed-up collision checking. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next collision checking between the same two entities.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,int caching=simGeom.getOctreeSegmentCollision(int octreeHandle,list octreePos,list octreeQuat,list segmentExtremity,list segmentVector,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>, <a href="#simGeom.getMeshSegmentCollision">simGeom.getMeshSegmentCollision</a>, <a href="#simGeom.getOctreeOctreeCollision">simGeom.getOctreeOctreeCollision</a>, <a href="#simGeom.getOctreePtcloudCollision">simGeom.getOctreePtcloudCollision</a>, <a href="#simGeom.getOctreeTriangleCollision">simGeom.getOctreeTriangleCollision</a>, <a href="#simGeom.getOctreePointCollision">simGeom.getOctreePointCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreeSegmentDistance" id="simGeom.getOctreeSegmentDistance"></a>simGeom.getOctreeSegmentDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between an OC-tree object and a segment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] ocMinDistPt,float[3] segmentDistSegPt,int caching=simGeom.getOctreeSegmentDistance(int octreeHandle,float[3] octreePos,float[4] octreeQuat,float[3] segmentEndPoint,float[3] segmentVector,float thresholdDist=nil,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>segmentEndPoint</strong>: position of vertex A on the segment.</div>
<div><strong>segmentVector</strong>: vector stretching from vertex A to vertex B on the segment.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>ocMinDistPt</strong>: the minimum distance point on the OC-tree. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>segmentDistSegPt</strong>: the minimum distance point on the segment. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list ocMinDistPt,list segmentDistSegPt,int caching=simGeom.getOctreeSegmentDistance(int octreeHandle,list octreePos,list octreeQuat,list segmentEndPoint,list segmentVector,float thresholdDist=None,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getOctreeOctreeDistance">simGeom.getOctreeOctreeDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getSegmentSegmentDistance">simGeom.getSegmentSegmentDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreeSerializationData" id="simGeom.getOctreeSerializationData"></a>simGeom.getOctreeSerializationData</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the serialization data from an OC-tree object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">buffer serializationData=simGeom.getOctreeSerializationData(int octreeHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>serializationData</strong>: the serialization data.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bytes serializationData=simGeom.getOctreeSerializationData(int octreeHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createOctreeFromSerializationData">simGeom.createOctreeFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreeTriangleCollision" id="simGeom.getOctreeTriangleCollision"></a>simGeom.getOctreeTriangleCollision</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Checks for collision between an OC-tree object and a triangle.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">bool collisionResult,int caching=simGeom.getOctreeTriangleCollision(int octreeHandle,float[3] octreePos,float[4] octreeQuat,float[3] p,float[3] v,float[3] w,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>p</strong>: position of vertex A on the triangle.</div>
<div><strong>v</strong>: vector stretching from vertex A to vertex B on the triangle.</div>
<div><strong>w</strong>: vector stretching from vertex A to vertex C on the triangle.</div>
<div><strong>caching</strong>: a value from previous collision checking between the same two entities, to speed-up collision checking. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>collisionResult</strong>: the collision status.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next collision checking between the same two entities.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bool collisionResult,int caching=simGeom.getOctreeTriangleCollision(int octreeHandle,list octreePos,list octreeQuat,list p,list v,list w,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeCollision">simGeom.getMeshOctreeCollision</a>, <a href="#simGeom.getMeshTriangleCollision">simGeom.getMeshTriangleCollision</a>, <a href="#simGeom.getOctreeOctreeCollision">simGeom.getOctreeOctreeCollision</a>, <a href="#simGeom.getOctreePtcloudCollision">simGeom.getOctreePtcloudCollision</a>, <a href="#simGeom.getOctreeSegmentCollision">simGeom.getOctreeSegmentCollision</a>, <a href="#simGeom.getOctreePointCollision">simGeom.getOctreePointCollision</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreeTriangleDistance" id="simGeom.getOctreeTriangleDistance"></a>simGeom.getOctreeTriangleDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between an OC-tree object and a triangle.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] ocMinDistPt,float[3] triangleMinDistPt,int caching=simGeom.getOctreeTriangleDistance(int octreeHandle,float[3] octreePos,float[4] octreeQuat,float[3] p,float[3] v,float[3] w,float thresholdDist=nil,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>octreePos</strong>: the position of the OC-tree.</div> <div><strong>octreeQuat</strong>: the quaternion of the OC-tree.</div>
<div><strong>p</strong>: position of vertex A on the triangle.</div>
<div><strong>v</strong>: vector stretching from vertex A to vertex B on the triangle.</div>
<div><strong>w</strong>: vector stretching from vertex A to vertex C on the triangle.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted or -1.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>ocMinDistPt</strong>: the minimum distance point on the OC-tree. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>triangleMinDistPt</strong>: the minimum distance point on the triangle. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list ocMinDistPt,list triangleMinDistPt,int caching=simGeom.getOctreeTriangleDistance(int octreeHandle,list octreePos,list octreeQuat,list p,list v,list w,float thresholdDist=None,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshOctreeDistance">simGeom.getMeshOctreeDistance</a>, <a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getOctreeOctreeDistance">simGeom.getOctreeOctreeDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getTriangleTriangleDistance">simGeom.getTriangleTriangleDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getOctreeVoxels" id="simGeom.getOctreeVoxels"></a>simGeom.getOctreeVoxels</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves voxel data from an OC-tree.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[] posData,int[] colorData,int[] userData=simGeom.getOctreeVoxels(int octreeHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>posData</strong>: position data: for each voxel, there are 3 position values (XYZ).</div>
<div><strong>colorData</strong>: color data: for each voxel, there are 3 color values (RGB, 0-1).</div>
<div><strong>userData</strong>: user data: for each voxel, there is one user data value.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list posData,list colorData,list userData=simGeom.getOctreeVoxels(int octreeHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getPtcloudPointDistance" id="simGeom.getPtcloudPointDistance"></a>simGeom.getPtcloudPointDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a point-cloud object and a point.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] pcMinDistPt,int caching=simGeom.getPtcloudPointDistance(int ptcloudHandle,float[3] pcPos,float[4] pcQuat,float[3] point,float thresholdDist=nil,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
<div><strong>pcPos</strong>: the position of the point-cloud.</div> <div><strong>pcQuat</strong>: the quaternion of the point-cloud.</div>
<div><strong>point</strong>: the position of the point.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>pcMinDistPt</strong>: the minimum distance point on the point-cloud. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list pcMinDistPt,int caching=simGeom.getPtcloudPointDistance(int ptcloudHandle,list pcPos,list pcQuat,list point,float thresholdDist=None,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>, <a href="#simGeom.getPtcloudPtcloudDistance">simGeom.getPtcloudPtcloudDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getPtcloudPoints" id="simGeom.getPtcloudPoints"></a>simGeom.getPtcloudPoints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves point data from a point-cloud.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float[] posData,int[] colorData=simGeom.getPtcloudPoints(int ptcloudHandle,float prop=1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
<div><strong>prop</strong>: the proportion of data to retrieve, on a voxel-basis. 1 retrieves all data, 0.25 retrieves 25% of the data.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>posData</strong>: the position data: for each point, there are 3 position values (XYZ).</div>
<div><strong>colorData</strong>: the color data: for each point, there are 3 color values (RGB, 0-1).</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">list posData,list colorData=simGeom.getPtcloudPoints(int ptcloudHandle,float prop=1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getPtcloudPtcloudDistance" id="simGeom.getPtcloudPtcloudDistance"></a>simGeom.getPtcloudPtcloudDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between two point-cloud objects.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] pc1MinDistPt,float[3] pc2MinDistPt,int[2] caching=simGeom.getPtcloudPtcloudDistance(int pc1Handle,float[3] pc1pos,float[4] pc1Quat,int pc2Handle,float[3] pc2Pos,float[4] pc2Quat,float distanceThreshold=nil,int[2] caching)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>pc1Handle</strong>: the handle of the first point-cloud object.</div>
<div><strong>pc1Pos</strong>: the position of the first point-cloud.</div>
<div><strong>pc1Quat</strong>: the quaternion of the first point-cloud.</div>
<div><strong>pc2Handle</strong>: the handle of the second point-cloud object.</div>
<div><strong>pc2Pos</strong>: the position of the second point-cloud.</div>
<div><strong>pc2Quat</strong>: the quaternion of the second point-cloud.</div>
<div><strong>distanceThreshold</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a table with two values from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>pc1MinDistPt</strong>: the minimum distance point on the first point-cloud. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>pc2MinDistPt</strong>: the minimum distance point on the second point-cloud. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a table with two values that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list pc1MinDistPt,list pc2MinDistPt,list caching=simGeom.getPtcloudPtcloudDistance(int pc1Handle,list pc1pos,list pc1Quat,int pc2Handle,list pc2Pos,list pc2Quat,float distanceThreshold=None,list caching)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getPtcloudSegmentDistance" id="simGeom.getPtcloudSegmentDistance"></a>simGeom.getPtcloudSegmentDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a point-cloud and a segment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] pcMinDistPt,float[3] segmentDistSegPt,int caching=simGeom.getPtcloudSegmentDistance(int ptcloudHandle,float[3] pcPos,float[4] pcQuat,float[3] segmentEndPoint,float[3] segmentVector,float thresholdDist=nil,int caching=-1)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
<div><strong>pcPos</strong>: the position of the point-cloud.</div> <div><strong>pcQuat</strong>: the quaternion of the point-cloud.</div>
<div><strong>segmentEndPoint</strong>: position of vertex A on the segment.</div>
<div><strong>segmentVector</strong>: vector stretching from vertex A to vertex B on the segment.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>pcMinDistPt</strong>: the minimum distance point on the point-cloud. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>segmentDistSegPt</strong>: the minimum distance point on the segment. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list pcMinDistPt,list segmentDistSegPt,int caching=simGeom.getPtcloudSegmentDistance(int ptcloudHandle,list pcPos,list pcQuat,list segmentEndPoint,list segmentVector,float thresholdDist=None,int caching=-1)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getPtcloudPtcloudDistance">simGeom.getPtcloudPtcloudDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getSegmentSegmentDistance">simGeom.getSegmentSegmentDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getPtcloudSerializationData" id="simGeom.getPtcloudSerializationData"></a>simGeom.getPtcloudSerializationData</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Retrieves the serialization data from a point-cloud object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">buffer serializationData=simGeom.getPtcloudSerializationData(int ptcloudHandle)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>serializationData</strong>: the serialization data.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">bytes serializationData=simGeom.getPtcloudSerializationData(int ptcloudHandle)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.createPtcloudFromSerializationData">simGeom.createPtcloudFromSerializationData</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getPtcloudTriangleDistance" id="simGeom.getPtcloudTriangleDistance"></a>simGeom.getPtcloudTriangleDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a point-cloud object and a triangle.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] pcMinDistPt,float[3] triangleMinDistPt,int caching=simGeom.getPtcloudTriangleDistance(int ptcloudHandle,float[3] pcPos,float[4] pcQuat,float[3] p,float[3] v,float[3] w,float thresholdDist=nil,int caching=nil)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
<div><strong>pcPos</strong>: the position of the point-cloud.</div> <div><strong>pcQuat</strong>: the quaternion of the point-cloud.</div>
<div><strong>p</strong>: position of vertex A on the triangle.</div>
<div><strong>v</strong>: vector stretching from vertex A to vertex B on the triangle.</div>
<div><strong>w</strong>: vector stretching from vertex A to vertex C on the triangle.</div>
<div><strong>thresholdDist</strong>: the distance threshold. Can be omitted.</div>
<div><strong>caching</strong>: a value from previous distance calculation between the same two entities, to speed-up calculations. Can be omitted.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities, or if it is not smaller than the threshold distance, the threshold distance.</div>
<div><strong>pcMinDistPt</strong>: the minimum distance point on the point-cloud. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>triangleMinDistPt</strong>: the minimum distance point on the triangle. nil if the distance is not smaller than the threshold distance.</div>
<div><strong>caching</strong>: a value that can be used to speed-up next distance calculation between the same two entities. nil if the distance is not smaller than the threshold distance.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list pcMinDistPt,list triangleMinDistPt,int caching=simGeom.getPtcloudTriangleDistance(int ptcloudHandle,list pcPos,list pcQuat,list p,list v,list w,float thresholdDist=None,int caching=None)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshPtcloudDistance">simGeom.getMeshPtcloudDistance</a>, <a href="#simGeom.getOctreePtcloudDistance">simGeom.getOctreePtcloudDistance</a>, <a href="#simGeom.getPtcloudPtcloudDistance">simGeom.getPtcloudPtcloudDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>, <a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getTriangleTriangleDistance">simGeom.getTriangleTriangleDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getSegmentPointDistance" id="simGeom.getSegmentPointDistance"></a>simGeom.getSegmentPointDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a segment and a point.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] segmentDistSegPt=simGeom.getSegmentPointDistance(float[3] segmentEndPoint,float[3] segmentVector,float[3] point)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>segmentEndPoint</strong>: position of vertex A on the segment.</div>
<div><strong>segmentVector</strong>: vector stretching from vertex A to vertex B on the segment.</div>
<div><strong>point</strong>: position of the point</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>segmentDistSegPt</strong>: the minimum distance point on the segment.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list segmentDistSegPt=simGeom.getSegmentPointDistance(list segmentEndPoint,list segmentVector,list point)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a>, <a href="#simGeom.getSegmentSegmentDistance">simGeom.getSegmentSegmentDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getSegmentSegmentDistance" id="simGeom.getSegmentSegmentDistance"></a>simGeom.getSegmentSegmentDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between two segments.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] segment1DistSegPt,float[3] segment2DistSegPt=simGeom.getSegmentSegmentDistance(float[3] segment1EndPoint,float[3] segment1Vector,float[3] segment2EndPoint,float[3] segment2Vector)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>segment1EndPoint</strong>: position of point A on the first segment</div>
<div><strong>segment1Vector</strong>: vector stretching from point A to point B on the first segment.</div>
<div><strong>segment2EndPoint</strong>: position of point A on the second segment</div>
<div><strong>segment2Vector</strong>: vector stretching from point A to point B on the second segment.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>segment1DistSegPt</strong>: the minimum distance point on the first segment.</div>
<div><strong>segment2DistSegPt</strong>: the minimum distance point on the second segment.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list segment1DistSegPt,list segment2DistSegPt=simGeom.getSegmentSegmentDistance(list segment1EndPoint,list segment1Vector,list segment2EndPoint,list segment2Vector)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getTransformedPoints" id="simGeom.getTransformedPoints"></a>simGeom.getTransformedPoints</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Transforms points via a transformation matrix, or via a position and a quaternion or Euler angles.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">
<div>1) float[] transformedPoints=simGeom.getTransformedPoints(float[] points,float[12] transformationMatrix)</div>
<div>2) float[] transformedPoints=simGeom.getTransformedPoints(float[] points,float[3] pos,float[4] quaternion)</div>
<div>2) float[] transformedPoints=simGeom.getTransformedPoints(float[] points,float[3] pos,float[3] eulerAngles)</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>points</strong>: the points to transform.</div>
<div><strong>transformationMatrix</strong>: a transformation matrix: 12 values (the last row of the 4x4 matrix (0,0,0,1) is not needed). The x-axis of the orientation component is (matrix[1],matrix[5],matrix[9]), the y-axis of the orientation component is (matrix[2],matrix[6],matrix[10]), the z-axis of the orientation component is (matrix[3],matrix[7],matrix[11]), and the translation component is (matrix[4],matrix[8],matrix[12]).</div>
<div><strong>pos</strong>: a position.</div>
<div><strong>quaternion</strong>: a quaternion.</div>
<div><strong>eulerAngles</strong>: Euler angles.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>transformedPoints</strong>: the transformed points.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">
<div>1) list transformedPoints=simGeom.getTransformedPoints(list points,list transformationMatrix)</div>
<div>2) list transformedPoints=simGeom.getTransformedPoints(list points,list pos,list quaternion)</div>
<div>2) list transformedPoints=simGeom.getTransformedPoints(list points,list pos,list eulerAngles)</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr">
</td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getTrianglePointDistance" id="simGeom.getTrianglePointDistance"></a>simGeom.getTrianglePointDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a triangle and a point.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] triangleDistSegPt=simGeom.getTrianglePointDistance(float[3] p,float[3] v,float[3] w,float[3] point)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>p</strong>: position of vertex A on the triangle.</div>
<div><strong>v</strong>: vector stretching from vertex A to vertex B on the triangle.</div>
<div><strong>w</strong>: vector stretching from vertex A to vertex C on the triangle.</div>
<div><strong>point</strong>: position of the point</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>triangleDistSegPt</strong>: the minimum distance point on the triangle.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list triangleDistSegPt=simGeom.getTrianglePointDistance(list p,list v,list w,list point)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getMeshPointDistance">simGeom.getMeshPointDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getOctreePointDistance">simGeom.getOctreePointDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getPtcloudPointDistance">simGeom.getPtcloudPointDistance</a>, <a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getBoxPointDistance">simGeom.getBoxPointDistance</a>, <a href="#simGeom.getTriangleTriangleDistance">simGeom.getTriangleTriangleDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getTriangleSegmentDistance" id="simGeom.getTriangleSegmentDistance"></a>simGeom.getTriangleSegmentDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between a triangle and a segment.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] triangleDistSegPt,float[3] segmentDistSegPt=simGeom.getTriangleSegmentDistance(float[3] p,float[3] v,float[3] w,float[3] segmentEndPoint,float[3] segmentVector)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>p</strong>: position of vertex A on the triangle.</div>
<div><strong>v</strong>: vector stretching from vertex A to vertex B on the triangle.</div>
<div><strong>w</strong>: vector stretching from vertex A to vertex C on the triangle.</div>
<div><strong>segmentEndPoint</strong>: position of vertex A on the segment.</div>
<div><strong>segmentVector</strong>: vector stretching from vertex A to vertex B on the segment.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>triangleDistSegPt</strong>: the minimum distance point on the triangle.</div>
<div><strong>segmentDistSegPt</strong>: the minimum distance point on the segment.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list triangleDistSegPt,list segmentDistSegPt=simGeom.getTriangleSegmentDistance(list p,list v,list w,list segmentEndPoint,list segmentVector)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getMeshSegmentDistance">simGeom.getMeshSegmentDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getOctreeSegmentDistance">simGeom.getOctreeSegmentDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getPtcloudSegmentDistance">simGeom.getPtcloudSegmentDistance</a>, <a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getBoxSegmentDistance">simGeom.getBoxSegmentDistance</a>, <a href="#simGeom.getTriangleTriangleDistance">simGeom.getTriangleTriangleDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a>, <a href="#simGeom.getSegmentSegmentDistance">simGeom.getSegmentSegmentDistance</a>, <a href="#simGeom.getSegmentPointDistance">simGeom.getSegmentPointDistance</a></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.getTriangleTriangleDistance" id="simGeom.getTriangleTriangleDistance"></a>simGeom.getTriangleTriangleDistance</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Computes the minimum distance between two triangles.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">float distance,float[3] distSegPt1,float[3] distSegPt2=simGeom.getTriangleTriangleDistance(float[3] p1,float[3] v1,float[3] w1,float[3] p2,float[3] v2,float[3] w2)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>p1</strong>: position of point A on triangle 1.</div>
<div><strong>v1</strong>: vector stretching from point A to point B on triangle 1.</div>
<div><strong>w1</strong>: vector stretching from point A to point C on triangle 1.</div>
<div><strong>p2</strong>: position of point A on triangle 2.</div>
<div><strong>v2</strong>: vector stretching from point A to point B on triangle 2.</div>
<div><strong>w2</strong>: vector stretching from point A to point C on triangle 2.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet">
<div><strong>distance</strong>: the minimum distance between the two entities.</div>
<div><strong>triangle1DistSegPt</strong>: the minimum distance point on the first triangle.</div>
<div><strong>triangle2DistSegPt</strong>: the minimum distance point on the second triangle.</div>
</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">float distance,list distSegPt1,list distSegPt2=simGeom.getTriangleTriangleDistance(list p1,list v1,list w1,list p2,list v2,list w2)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"><a href="#simGeom.getMeshTriangleDistance">simGeom.getMeshTriangleDistance</a>, <a href="#simGeom.getOctreeTriangleDistance">simGeom.getOctreeTriangleDistance</a>, <a href="#simGeom.getPtcloudTriangleDistance">simGeom.getPtcloudTriangleDistance</a>, <a href="#simGeom.getBoxTriangleDistance">simGeom.getBoxTriangleDistance</a>, <a href="#simGeom.getTriangleSegmentDistance">simGeom.getTriangleSegmentDistance</a>, <a href="#simGeom.getTrianglePointDistance">simGeom.getTrianglePointDistance</a></td>
</tr>
</table>
<br>


<p class="subsectionBar">
<a name="simGeom.scaleMesh" id="simGeom.scaleMesh"></a>simGeom.scaleMesh</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Scales a mesh object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simGeom.scaleMesh(int meshHandle,float scalingFactor)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>meshHandle</strong>: the handle of the mesh object.</div>
<div><strong>scalingFactor</strong>: the scaling factor.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet"></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simGeom.scaleMesh(int meshHandle,float scalingFactor)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.scaleOctree" id="simGeom.scaleOctree"></a>simGeom.scaleOctree</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Scales an OC-tree object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn"> simGeom.scaleOctree(int octreeHandle,float scalingFactor)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>octreeHandle</strong>: the handle of the OC-tree object.</div>
<div><strong>scalingFactor</strong>: the scaling factor.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet"></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn"> simGeom.scaleOctree(int octreeHandle,float scalingFactor)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>
<br>

<p class="subsectionBar">
<a name="simGeom.scalePtcloud" id="simGeom.scalePtcloud"></a>simGeom.scalePtcloud</p>
<table class="apiTable">
<tr class="apiTableTr">
<td class="apiTableLeftDescr">Description</td>
<td class="apiTableRightDescr">Scales a point-cloud object.</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLSyn">Lua synopsis</td>
<td class="apiTableRightLSyn">simGeom.scalePtcloud(int ptcloudHandle,float scalingFactor)</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLParam">Lua arguments</td>
<td class="apiTableRightLParam">
<div><strong>ptcloudHandle</strong>: the handle of the point-cloud object.</div>
<div><strong>scalingFactor</strong>: the scaling factor.</div>
</td>
</tr>
<tr class="apiTableTr">
<td class="apiTableLeftLRet">Lua return value(s)</td>
<td class="apiTableRightLRet"></td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftPSyn">Python synopsis</td>
<td class="apiTableRightPSyn">simGeom.scalePtcloud(int ptcloudHandle,float scalingFactor)</td>
</tr>

<tr class="apiTableTr">
<td class="apiTableLeftDescr">See also</td>
<td class="apiTableRightDescr"></td>
</tr>
</table>

<br>
</td></tr>
</table></div>
<script type="text/javascript">
//
view = getParameterByName('view')
document.getElementById('alphabetical').style.display = view == 'alphabetical' ? 'table-cell' : 'none'
document.getElementById('category').style.display = view == 'category' ? 'table-cell' : 'none'
document.getElementById('commands').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('enums').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('structs').style.display = view == null ? 'table-cell' : 'none'
document.getElementById('scriptFunctions').style.display = view == null ? 'table-cell' : 'none'
//
                </script>
</body>
</html>
