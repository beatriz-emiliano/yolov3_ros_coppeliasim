<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>ROS Interfaces</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>ROS Interfaces</h1>

<p>There are several ROS interfaces available for CoppeliaSim. Each one offers a specific behaviour, feature, or a way to operate:</p>

<li><a href="rosInterf.htm">The ROS Interface</a>: the ROS Interface duplicates the C++ ROS API with a good fidelity. This makes it the ideal choice for very flexible communication via ROS, but might require a little bit more insight on the various messages and the way ROS operates.</li>
<li><a href="ros2Interface.htm">The ROS 2 Interface</a>: the ROS 2 Interface duplicates the C++ ROS 2 API with a good fidelity. This makes it the ideal choice for very flexible communication via ROS 2, but might require a little bit more insight on the various messages and the way ROS 2 operates.</li>
<li>ROS interfaces developed by others: those are not directly supported by us. For instance, the <a href="http://wiki.ros.org/vrep_ros_bridge">CoppeliaSim ROS bridge</a>.</li>


<p>All ROS interfaces can normally operate side-by-side, but we highly recommend you to first try your hands on the <a href="rosInterf.htm">ROS Interface</a>, since this is the most flexible and natural approach. The packages to the first two above listed ROS interfaces are located <a href="https://github.com/CoppeliaRobotics/simExtROS" target="_blank">here</a> and <a href="https://github.com/CoppeliaRobotics/sim_plugin_skeleton" target="_blank">here</a>. Use the <a href="http://catkin-tools.readthedocs.io/en/latest/">catkin tools</a> to build those packages, otherwise you might run into difficulties.</p>

<p>As an example, a <a href="visionSensors.htm">vision sensor</a> ROS2 publisher could look like:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">
function sysCall_init()
    visionSensor=sim.getObject('/Vision_sensor')

    -- Enable an image publisher:
    pub=simROS2.createPublisher('/image', 'sensor_msgs/msg/Image')
    simROS2.publisherTreatUInt8ArrayAsString(pub)
end

function sysCall_sensing()
    -- Publish the image of the vision sensor:
    local img,resolution=sim.getVisionSensorImg(visionSensor)
    data={}
    data.header={stamp=simROS2.getTime(), frame_id='a'}
    data.height=resolution[2]
    data.width=resolution[1]
    data.encoding='rgb8'
    data.is_bigendian=1
    data.step=resolution[1]*3
    data.data=img
    simROS2.publish(pub,data)
end

function sysCall_cleanup()
    simROS2.shutdownPublisher(pub)
end</code>

<p>The subscriber on the other hand could look like:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">
function sysCall_init()
    -- Enable an image subscriber:
    sub=simROS2.createSubscription('/image', 'sensor_msgs/msg/Image', 'image_callback')
    simROS2.subscriptionTreatUInt8ArrayAsString(sub)
end

function image_callback(msg)
    -- Here we have received an image
end

function sysCall_cleanup()
    simROS2.shutdownSubscription(sub)
end</code>
<br>







<p>Also have a look at the <a href="rosTutorial.htm">ROS tutorial</a> and the <a href="externalControllerTutorial.htm">external controller tutorial</a>.</p>

<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
