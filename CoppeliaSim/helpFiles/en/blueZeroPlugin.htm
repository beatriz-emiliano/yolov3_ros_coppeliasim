<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>BlueZero Interface</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>BlueZero Interface</h1>

<p class="infoBox">BlueZero is deprecated. We highly recommend using the <a href="zmqRemoteApiOverview.htm">ZeroMQ remote API</a> instead.</p>

<p>The BlueZero interface is part of the <a href="apisOverview.htm">CoppeliaSim API framework</a>. It wraps into a CoppeliaSim plugin the <a href="https://github.com/CoppeliaRobotics/bluezero" target="_blank">BlueZero (B&Oslash;) framework</a>. You can recognize BlueZero API functions from the <em>simB0</em> prefix.</p>

<p>B&Oslash; is a cross-platform middleware which provides tools for interconnecting pieces of software running in multiple threads, multiple processes and even multiple machines. It has some similarities with ROS, although it only focuses on providing communication paradigms (client/server and publisher/subscriber) and message transport (based on ZeroMQ), while being agnostic to message serialization format or common protocols and data structures.</p>

<p>CoppeliaSim can act as a one or several B&Oslash; nodes that other nodes can communicate with via B&Oslash; services, B&Oslash; publishers and B&Oslash; subscribers.</p>

<p>The BlueZero Interface functionality in CoppeliaSim is enabled via a plugin: <em>simExtB0.dll, libsimExtB0.so</em> or <em>libsimExtB0.dylib</em>. The code to the plugin, which can be found <a href="https://github.com/CoppeliaRobotics/simExtB0" target="_blank">here</a>, can easily be adapted to your own needs. The plugin is loaded when CoppeliaSim is launched, but you should make sure to have <em>b0_ resolver</em> running. Make sure to inspect CoppeliaSim's console window or terminal for details on plugin load operations. Various BlueZero tools can be found already compiled in the CoppeliaSim folder.</p>

<p>As an example, a <a href="visionSensors.htm">vision sensor</a> publisher could look like:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">
function sysCall_init()
    visionSensor=sim.getObject('/Vision_sensor')

    -- Enable an image publisher:
    b0Node=simB0.nodeCreate('b0Node')
    pub=simB0.publisherCreate(b0Node,'image')
    simB0.nodeInit(b0Node)
end

function sysCall_sensing()
    -- Publish the image of the vision sensor:
    local msg=sim.getVisionSensorCharImage(visionSensor)
    simB0.publisherPublish(pub,msg)
end

function sysCall_cleanup()
    if b0Node then
        simB0.nodeCleanup(b0Node)
        simB0.publisherDestroy(pub)
        simB0.nodeDestroy(b0Node)
    end
end</code>

<p>The subscriber on the other hand could look like:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">
function sysCall_init()
    -- Enable an image subscriber:
    b0Node=simB0.nodeCreate('b0Node')
    sub=simB0.subscriberCreate(b0Node,'image','image_callback')
    simB0.nodeInit(b0Node)
end

function image_callback(msg)
    -- Here we have received an image
end

function sysCall_sensing()
    simB0.nodeSpinOnce(b0Node)
end

function sysCall_cleanup()
    if b0Node then
        simB0.nodeCleanup(b0Node)
        simB0.subscriberDestroy(sub)
        simB0.nodeDestroy(b0Node)
    end
end</code>


<p>Have a look at following simulation scene for a quick start with the BlueZero interface:</p>

<li><em>blueZeroDemo1.ttt</em></li>
<li><em>blueZeroDemo2.ttt</em></li>
<li><em>controlTypeExamples.ttt</em></li>

<p>Also have a look at the <a href="externalControllerTutorial.htm">external controller tutorial</a>.</p>


<br>
<br>
 </tr>
</table> 
</div>  
  
  
</body>

</html>